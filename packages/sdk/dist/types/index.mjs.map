{"version":3,"sources":["../../src/types/index.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * Core Types for AI Marketplace SDK\n * \n * Unified types supporting OpenAI and Claude providers with tree-shakable exports\n */\n\n// Base Types\nexport type ApiProvider = 'openai' | 'claude' | 'google' | 'azure' | 'cohere' | 'huggingface';\n\nexport interface BaseConfig {\n  apiKey?: string;\n  baseURL?: string;\n  timeout?: number;\n  maxRetries?: number;\n  retryDelay?: number;\n  userAgent?: string;\n}\n\n// Message Types - Unified interface for all providers\nexport interface Message {\n  role: 'system' | 'user' | 'assistant' | 'tool';\n  content: string | MessageContent[];\n  name?: string;\n  tool_calls?: ToolCall[];\n  tool_call_id?: string;\n}\n\nexport interface MessageContent {\n  type: 'text' | 'image_url';\n  text?: string;\n  image_url?: {\n    url: string;\n    detail?: 'low' | 'high' | 'auto';\n  };\n}\n\nexport interface ToolCall {\n  id: string;\n  type: 'function';\n  function: {\n    name: string;\n    arguments: string;\n  };\n}\n\n// Chat Completion Types\nexport interface ChatCompletionRequest {\n  messages: Message[];\n  model?: string;\n  temperature?: number;\n  max_tokens?: number;\n  top_p?: number;\n  frequency_penalty?: number;\n  presence_penalty?: number;\n  stop?: string | string[];\n  stream?: boolean;\n  tools?: Tool[];\n  tool_choice?: 'none' | 'auto' | { type: 'function'; function: { name: string } };\n  user?: string;\n}\n\nexport interface Tool {\n  type: 'function';\n  function: {\n    name: string;\n    description?: string;\n    parameters?: Record<string, any>;\n  };\n}\n\nexport interface ChatCompletionResponse {\n  id: string;\n  object: 'chat.completion';\n  created: number;\n  model: string;\n  provider: ApiProvider;\n  choices: ChatChoice[];\n  usage: Usage;\n  system_fingerprint?: string;\n}\n\nexport interface ChatChoice {\n  index: number;\n  message: Message;\n  finish_reason: 'stop' | 'length' | 'tool_calls' | 'content_filter' | null;\n  logprobs?: ChatCompletionLogprobs | null;\n}\n\nexport interface ChatCompletionLogprobs {\n  content: ChatCompletionTokenLogprob[] | null;\n}\n\nexport interface ChatCompletionTokenLogprob {\n  token: string;\n  logprob: number;\n  bytes: number[] | null;\n  top_logprobs: TopLogprob[];\n}\n\nexport interface TopLogprob {\n  token: string;\n  logprob: number;\n  bytes: number[] | null;\n}\n\nexport interface Usage {\n  prompt_tokens: number;\n  completion_tokens: number;\n  total_tokens: number;\n  estimated_cost: number;\n}\n\n// Streaming Types\nexport interface ChatCompletionChunk {\n  id: string;\n  object: 'chat.completion.chunk';\n  created: number;\n  model: string;\n  provider: ApiProvider;\n  choices: ChatChunkChoice[];\n  usage?: Usage;\n}\n\nexport interface ChatChunkChoice {\n  index: number;\n  delta: {\n    role?: 'assistant';\n    content?: string;\n    tool_calls?: ToolCall[];\n  };\n  finish_reason: 'stop' | 'length' | 'tool_calls' | 'content_filter' | null;\n}\n\n// Image Generation Types\nexport interface ImageGenerationRequest {\n  prompt: string;\n  model?: string;\n  n?: number;\n  size?: '256x256' | '512x512' | '1024x1024' | '1792x1024' | '1024x1792';\n  quality?: 'standard' | 'hd';\n  style?: 'vivid' | 'natural';\n  response_format?: 'url' | 'b64_json';\n  user?: string;\n}\n\nexport interface ImageGenerationResponse {\n  created: number;\n  data: ImageData[];\n  provider: ApiProvider;\n  usage?: {\n    estimated_cost: number;\n  };\n}\n\nexport interface ImageData {\n  url?: string;\n  b64_json?: string;\n  revised_prompt?: string;\n}\n\n// Provider Configuration Types\nexport interface ProviderConfig extends BaseConfig {\n  provider: ApiProvider;\n  model: string;\n  defaultParams?: Record<string, any>;\n}\n\nexport interface ProviderCapabilities {\n  chat: boolean;\n  images: boolean;\n  embeddings: boolean;\n  tools: boolean;\n  streaming: boolean;\n  vision: boolean;\n  maxTokens: number;\n  costPer1kTokens: {\n    input: number;\n    output: number;\n  };\n}\n\n// Error Types\nexport interface SDKError extends Error {\n  code: string;\n  statusCode?: number;\n  provider?: ApiProvider;\n  requestId?: string;\n  details?: Record<string, any>;\n}\n\nexport interface RateLimitError extends SDKError {\n  code: 'RATE_LIMIT_EXCEEDED';\n  retryAfter?: number;\n  limitType: 'requests' | 'tokens' | 'cost';\n}\n\nexport interface AuthenticationError extends SDKError {\n  code: 'AUTHENTICATION_FAILED';\n  provider: ApiProvider;\n}\n\nexport interface ValidationError extends SDKError {\n  code: 'VALIDATION_ERROR';\n  field: string;\n  value: any;\n}\n\n// Provider Selection Types\nexport interface ProviderConstraints {\n  maxCost?: number;\n  maxLatency?: number;\n  qualityThreshold?: number;\n  requiredCapabilities?: (keyof ProviderCapabilities)[];\n  excludeProviders?: ApiProvider[];\n  preferredProviders?: ApiProvider[];\n}\n\nexport interface ProviderSelection {\n  provider: ApiProvider;\n  model: string;\n  estimatedCost: number;\n  estimatedLatency: number;\n  qualityScore: number;\n  reasoning: string;\n}\n\n// Usage Tracking Types\nexport interface UsageMetrics {\n  requests: number;\n  tokens: {\n    input: number;\n    output: number;\n    total: number;\n  };\n  cost: number;\n  latency: {\n    avg: number;\n    p95: number;\n    p99: number;\n  };\n  errors: {\n    total: number;\n    rate: number;\n    byCode: Record<string, number>;\n  };\n}\n\nexport interface RequestMetrics {\n  requestId: string;\n  provider: ApiProvider;\n  model: string;\n  startTime: number;\n  endTime: number;\n  tokens: Usage;\n  cost: number;\n  success: boolean;\n  error?: SDKError;\n}\n\n// SDK Configuration Types\nexport interface SDKConfig {\n  apiKey?: string;\n  baseURL?: string;\n  defaultProvider?: ApiProvider;\n  defaultModel?: string;\n  providers?: Record<ApiProvider, ProviderConfig>;\n  enableUsageTracking?: boolean;\n  enableRetries?: boolean;\n  maxRetries?: number;\n  retryDelay?: number;\n  timeout?: number;\n  userAgent?: string;\n  debug?: boolean;\n}\n\n// Model Information Types\nexport interface ModelInfo {\n  id: string;\n  provider: ApiProvider;\n  name: string;\n  description?: string;\n  contextWindow: number;\n  maxOutputTokens: number;\n  capabilities: ProviderCapabilities;\n  pricing: {\n    input: number; // per 1k tokens\n    output: number; // per 1k tokens\n  };\n  deprecated?: boolean;\n  deprecationDate?: string;\n}\n\n// Export utility types\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n// Type guards\nexport function isSDKError(error: any): error is SDKError {\n  return error && typeof error === 'object' && 'code' in error && typeof error.code === 'string';\n}\n\nexport function isRateLimitError(error: any): error is RateLimitError {\n  return isSDKError(error) && error.code === 'RATE_LIMIT_EXCEEDED';\n}\n\nexport function isAuthenticationError(error: any): error is AuthenticationError {\n  return isSDKError(error) && error.code === 'AUTHENTICATION_FAILED';\n}\n\nexport function isValidationError(error: any): error is ValidationError {\n  return isSDKError(error) && error.code === 'VALIDATION_ERROR';\n}\n\n// Constants\nexport const SUPPORTED_PROVIDERS: ApiProvider[] = [\n  'openai',\n  'claude',\n  'google',\n  'azure',\n  'cohere',\n  'huggingface'\n];\n\nexport const DEFAULT_MODELS: Record<ApiProvider, string> = {\n  openai: 'gpt-4o',\n  claude: 'claude-3-5-sonnet-20241022',\n  google: 'gemini-pro',\n  azure: 'gpt-4',\n  cohere: 'command-r-plus',\n  huggingface: 'meta-llama/Llama-2-70b-chat-hf'\n};\n\nexport const PROVIDER_CAPABILITIES: Record<ApiProvider, ProviderCapabilities> = {\n  openai: {\n    chat: true,\n    images: true,\n    embeddings: true,\n    tools: true,\n    streaming: true,\n    vision: true,\n    maxTokens: 128000,\n    costPer1kTokens: { input: 0.01, output: 0.03 }\n  },\n  claude: {\n    chat: true,\n    images: false,\n    embeddings: false,\n    tools: true,\n    streaming: true,\n    vision: true,\n    maxTokens: 200000,\n    costPer1kTokens: { input: 0.003, output: 0.015 }\n  },\n  google: {\n    chat: true,\n    images: false,\n    embeddings: true,\n    tools: true,\n    streaming: true,\n    vision: true,\n    maxTokens: 1000000,\n    costPer1kTokens: { input: 0.000125, output: 0.000375 }\n  },\n  azure: {\n    chat: true,\n    images: true,\n    embeddings: true,\n    tools: true,\n    streaming: true,\n    vision: true,\n    maxTokens: 128000,\n    costPer1kTokens: { input: 0.01, output: 0.03 }\n  },\n  cohere: {\n    chat: true,\n    images: false,\n    embeddings: true,\n    tools: true,\n    streaming: true,\n    vision: false,\n    maxTokens: 128000,\n    costPer1kTokens: { input: 0.0015, output: 0.002 }\n  },\n  huggingface: {\n    chat: true,\n    images: false,\n    embeddings: true,\n    tools: false,\n    streaming: true,\n    vision: false,\n    maxTokens: 4096,\n    costPer1kTokens: { input: 0.0002, output: 0.0002 }\n  }\n};"]}