{"version":3,"sources":["../../src/utils/errors.ts","../../src/types/index.ts","../../src/providers/base.ts","../../src/chat/index.ts"],"names":["CircuitState","factory","instance","DEFAULT_MODELS","SDKAuthenticationError","chat"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Error Handling and Retry Mechanisms\n * \n * Implements exponential backoff, circuit breaker patterns, and provider-specific error handling\n */\n\nimport type { \n  SDKError, \n  RateLimitError, \n  AuthenticationError, \n  ValidationError, \n  ApiProvider,\n  RequestMetrics \n} from '../types';\n\n/**\n * Custom SDK Error Classes\n */\nexport class BaseSDKError extends Error implements SDKError {\n  public readonly code: string;\n  public readonly statusCode?: number;\n  public readonly provider?: ApiProvider;\n  public readonly requestId?: string;\n  public readonly details?: Record<string, any>;\n\n  constructor(\n    message: string,\n    code: string,\n    options?: {\n      statusCode?: number;\n      provider?: ApiProvider;\n      requestId?: string;\n      details?: Record<string, any>;\n      cause?: Error;\n    }\n  ) {\n    super(message, { cause: options?.cause });\n    this.name = this.constructor.name;\n    this.code = code;\n    this.statusCode = options?.statusCode;\n    this.provider = options?.provider;\n    this.requestId = options?.requestId;\n    this.details = options?.details;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SDKRateLimitError extends BaseSDKError implements RateLimitError {\n  public readonly code = 'RATE_LIMIT_EXCEEDED';\n  public readonly retryAfter?: number;\n  public readonly limitType: 'requests' | 'tokens' | 'cost';\n\n  constructor(\n    message: string,\n    limitType: 'requests' | 'tokens' | 'cost',\n    options?: {\n      retryAfter?: number;\n      statusCode?: number;\n      provider?: ApiProvider;\n      requestId?: string;\n      details?: Record<string, any>;\n      cause?: Error;\n    }\n  ) {\n    super(message, 'RATE_LIMIT_EXCEEDED', options);\n    this.limitType = limitType;\n    this.retryAfter = options?.retryAfter;\n  }\n}\n\nexport class SDKAuthenticationError extends BaseSDKError implements AuthenticationError {\n  public readonly code = 'AUTHENTICATION_FAILED';\n  public readonly provider: ApiProvider;\n\n  constructor(\n    message: string,\n    provider: ApiProvider,\n    options?: {\n      statusCode?: number;\n      requestId?: string;\n      details?: Record<string, any>;\n      cause?: Error;\n    }\n  ) {\n    super(message, 'AUTHENTICATION_FAILED', { ...options, provider });\n    this.provider = provider;\n  }\n}\n\nexport class SDKValidationError extends BaseSDKError implements ValidationError {\n  public readonly code = 'VALIDATION_ERROR';\n  public readonly field: string;\n  public readonly value: any;\n\n  constructor(\n    message: string,\n    field: string,\n    value: any,\n    options?: {\n      statusCode?: number;\n      provider?: ApiProvider;\n      requestId?: string;\n      details?: Record<string, any>;\n      cause?: Error;\n    }\n  ) {\n    super(message, 'VALIDATION_ERROR', options);\n    this.field = field;\n    this.value = value;\n  }\n}\n\n/**\n * Error Factory - Creates appropriate error types from provider responses\n */\nexport class ErrorFactory {\n  static fromProviderError(\n    error: any,\n    provider: ApiProvider,\n    requestId?: string\n  ): SDKError {\n    // OpenAI error handling\n    if (provider === 'openai') {\n      return this.fromOpenAIError(error, requestId);\n    }\n\n    // Claude error handling\n    if (provider === 'claude') {\n      return this.fromClaudeError(error, requestId);\n    }\n\n    // Generic error handling\n    return this.fromGenericError(error, provider, requestId);\n  }\n\n  private static fromOpenAIError(error: any, requestId?: string): SDKError {\n    const statusCode = error.status || error.statusCode || 500;\n    const message = error.message || error.error?.message || 'OpenAI API error';\n\n    // Rate limiting\n    if (statusCode === 429) {\n      const retryAfter = error.headers?.['retry-after'] \n        ? parseInt(error.headers['retry-after'], 10) \n        : undefined;\n      \n      return new SDKRateLimitError(\n        message,\n        'requests',\n        {\n          retryAfter,\n          statusCode,\n          provider: 'openai',\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Authentication errors\n    if (statusCode === 401) {\n      return new SDKAuthenticationError(\n        message,\n        'openai',\n        {\n          statusCode,\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Validation errors\n    if (statusCode === 400) {\n      return new SDKValidationError(\n        message,\n        error.error?.param || 'unknown',\n        error.error?.code || 'unknown',\n        {\n          statusCode,\n          provider: 'openai',\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Generic OpenAI error\n    return new BaseSDKError(\n      message,\n      'OPENAI_API_ERROR',\n      {\n        statusCode,\n        provider: 'openai',\n        requestId,\n        details: { originalError: error },\n        cause: error\n      }\n    );\n  }\n\n  private static fromClaudeError(error: any, requestId?: string): SDKError {\n    const statusCode = error.status || error.statusCode || 500;\n    const message = error.message || error.error?.message || 'Claude API error';\n\n    // Rate limiting\n    if (statusCode === 429) {\n      const retryAfter = error.headers?.['retry-after'] \n        ? parseInt(error.headers['retry-after'], 10) \n        : undefined;\n      \n      return new SDKRateLimitError(\n        message,\n        'requests',\n        {\n          retryAfter,\n          statusCode,\n          provider: 'claude',\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Authentication errors\n    if (statusCode === 401) {\n      return new SDKAuthenticationError(\n        message,\n        'claude',\n        {\n          statusCode,\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Validation errors\n    if (statusCode === 400) {\n      return new SDKValidationError(\n        message,\n        error.error?.param || 'unknown',\n        error.error?.code || 'unknown',\n        {\n          statusCode,\n          provider: 'claude',\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Generic Claude error\n    return new BaseSDKError(\n      message,\n      'CLAUDE_API_ERROR',\n      {\n        statusCode,\n        provider: 'claude',\n        requestId,\n        details: { originalError: error },\n        cause: error\n      }\n    );\n  }\n\n  private static fromGenericError(\n    error: any,\n    provider: ApiProvider,\n    requestId?: string\n  ): SDKError {\n    const statusCode = error.status || error.statusCode || 500;\n    const message = error.message || `${provider} API error`;\n\n    return new BaseSDKError(\n      message,\n      'API_ERROR',\n      {\n        statusCode,\n        provider,\n        requestId,\n        details: { originalError: error },\n        cause: error\n      }\n    );\n  }\n}\n\n/**\n * Retry Configuration and Logic\n */\nexport interface RetryConfig {\n  maxRetries: number;\n  baseDelay: number;\n  maxDelay: number;\n  backoffMultiplier: number;\n  jitter: boolean;\n  retryableErrors: string[];\n}\n\nexport const DEFAULT_RETRY_CONFIG: RetryConfig = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second\n  maxDelay: 30000, // 30 seconds\n  backoffMultiplier: 2,\n  jitter: true,\n  retryableErrors: [\n    'RATE_LIMIT_EXCEEDED',\n    'NETWORK_ERROR',\n    'TIMEOUT',\n    'SERVER_ERROR',\n    'TEMPORARY_FAILURE'\n  ]\n};\n\nexport class RetryHandler {\n  private config: RetryConfig;\n\n  constructor(config: Partial<RetryConfig> = {}) {\n    this.config = { ...DEFAULT_RETRY_CONFIG, ...config };\n  }\n\n  /**\n   * Execute a function with retry logic\n   */\n  async execute<T>(\n    fn: () => Promise<T>,\n    context?: {\n      provider?: ApiProvider;\n      requestId?: string;\n      operation?: string;\n    }\n  ): Promise<T> {\n    let lastError: SDKError | null = null;\n    let attempt = 0;\n\n    while (attempt <= this.config.maxRetries) {\n      try {\n        return await fn();\n      } catch (error) {\n        // Preserve original error (e.g., HTTPError) for provider-level mapping\n        lastError = (error as any);\n\n        // Don't retry on last attempt\n        if (attempt === this.config.maxRetries) {\n          break;\n        }\n\n        // Check if error is retryable\n        if (!this.isRetryableError(lastError as any)) {\n          break;\n        }\n\n        // Calculate delay for next attempt\n        const delay = this.calculateDelay(attempt, lastError);\n        \n        console.warn(`Attempt ${attempt + 1} failed, retrying in ${delay}ms`, {\n          error: lastError.code,\n          provider: context?.provider,\n          requestId: context?.requestId,\n          operation: context?.operation\n        });\n\n        await this.sleep(delay);\n        attempt++;\n      }\n    }\n\n    // All attempts failed, throw the last error\n    throw lastError as any;\n  }\n\n  /**\n   * Check if an error should trigger a retry\n   */\n  private isRetryableError(error: any): boolean {\n    // Don't retry authentication or validation errors\n    if (error && (error.code === 'AUTHENTICATION_FAILED' || error.code === 'VALIDATION_ERROR')) {\n      return false;\n    }\n\n    // Retry rate limit errors\n    if (error && error.code === 'RATE_LIMIT_EXCEEDED') {\n      return true;\n    }\n\n    // Retry server errors (5xx)\n    const status = error?.status || error?.statusCode;\n    if (status && status >= 500) {\n      return true;\n    }\n\n    // Retry network/timeout errors\n    if (error && this.config.retryableErrors.includes(error.code)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculate exponential backoff delay with jitter\n   */\n  private calculateDelay(attempt: number, error: SDKError): number {\n    // Use retry-after header if available (rate limit errors)\n    if (error instanceof SDKRateLimitError && error.retryAfter) {\n      return error.retryAfter * 1000; // Convert seconds to milliseconds\n    }\n\n    // Exponential backoff\n    let delay = this.config.baseDelay * Math.pow(this.config.backoffMultiplier, attempt);\n    \n    // Cap at max delay\n    delay = Math.min(delay, this.config.maxDelay);\n\n    // Add jitter to avoid thundering herd\n    if (this.config.jitter) {\n      delay = delay * (0.5 + Math.random() * 0.5);\n    }\n\n    return Math.floor(delay);\n  }\n\n  /**\n   * Convert generic error to SDK error\n   */\n  private convertToSDKError(error: any, provider?: ApiProvider): SDKError {\n    if (error instanceof BaseSDKError) {\n      return error;\n    }\n\n    // Network/timeout errors\n    if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {\n      return new BaseSDKError(\n        `Network error: ${error.message}`,\n        'NETWORK_ERROR',\n        { provider, cause: error }\n      );\n    }\n\n    // Generic error\n    return new BaseSDKError(\n      error.message || 'Unknown error',\n      'UNKNOWN_ERROR',\n      { provider, cause: error }\n    );\n  }\n\n  /**\n   * Sleep utility\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n/**\n * Circuit Breaker Pattern Implementation\n */\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;\n  recoveryTimeout: number;\n  monitoringPeriod: number;\n}\n\nexport enum CircuitState {\n  CLOSED = 'closed',\n  OPEN = 'open',\n  HALF_OPEN = 'half_open'\n}\n\nexport class CircuitBreaker {\n  private state: CircuitState = CircuitState.CLOSED;\n  private failures: number = 0;\n  private lastFailureTime: number = 0;\n  private nextAttempt: number = 0;\n  private config: CircuitBreakerConfig;\n\n  constructor(config: Partial<CircuitBreakerConfig> = {}) {\n    this.config = {\n      failureThreshold: 5,\n      recoveryTimeout: 60000, // 1 minute\n      monitoringPeriod: 60000, // 1 minute\n      ...config\n    };\n  }\n\n  /**\n   * Execute function through circuit breaker\n   */\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    if (this.state === CircuitState.OPEN) {\n      if (Date.now() < this.nextAttempt) {\n        throw new BaseSDKError(\n          'Circuit breaker is OPEN - too many recent failures',\n          'CIRCUIT_BREAKER_OPEN'\n        );\n      } else {\n        this.state = CircuitState.HALF_OPEN;\n      }\n    }\n\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.failures = 0;\n    this.state = CircuitState.CLOSED;\n  }\n\n  private onFailure(): void {\n    this.failures++;\n    this.lastFailureTime = Date.now();\n\n    if (this.failures >= this.config.failureThreshold) {\n      this.state = CircuitState.OPEN;\n      this.nextAttempt = Date.now() + this.config.recoveryTimeout;\n    }\n  }\n\n  /**\n   * Get current circuit breaker status\n   */\n  getStatus(): {\n    state: CircuitState;\n    failures: number;\n    lastFailureTime: number;\n    nextAttempt: number;\n  } {\n    return {\n      state: this.state,\n      failures: this.failures,\n      lastFailureTime: this.lastFailureTime,\n      nextAttempt: this.nextAttempt\n    };\n  }\n}\n\n/**\n * Request timeout wrapper\n */\nexport function withTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n  context?: { operation?: string; provider?: ApiProvider }\n): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<never>((_, reject) => {\n      setTimeout(() => {\n        reject(new BaseSDKError(\n          `Operation timed out after ${timeoutMs}ms`,\n          'TIMEOUT',\n          {\n            provider: context?.provider,\n            details: { timeoutMs, operation: context?.operation }\n          }\n        ));\n      }, timeoutMs);\n    })\n  ]);\n}\n\n/**\n * Utility function to sanitize errors for logging\n */\nexport function sanitizeErrorForLogging(error: any): Record<string, any> {\n  const sanitized: Record<string, any> = {\n    name: error.name || 'Error',\n    message: error.message || 'Unknown error',\n    code: error.code,\n    statusCode: error.statusCode,\n    provider: error.provider,\n    requestId: error.requestId\n  };\n\n  // Remove sensitive information\n  if (error.details) {\n    sanitized.details = { ...error.details };\n    \n    // Remove API keys\n    if (sanitized.details.apiKey) {\n      sanitized.details.apiKey = '[REDACTED]';\n    }\n    \n    // Remove authorization headers\n    if (sanitized.details.headers?.authorization) {\n      sanitized.details.headers.authorization = '[REDACTED]';\n    }\n  }\n\n  return sanitized;\n}","/**\n * Core Types for AI Marketplace SDK\n * \n * Unified types supporting OpenAI and Claude providers with tree-shakable exports\n */\n\n// Base Types\nexport type ApiProvider = 'openai' | 'anthropic' | 'claude' | 'google' | 'azure' | 'cohere' | 'huggingface';\n\nexport interface BaseConfig {\n  apiKey?: string;\n  baseURL?: string;\n  timeout?: number;\n  maxRetries?: number;\n  retryDelay?: number;\n  userAgent?: string;\n}\n\n// Message Types - Unified interface for all providers\nexport interface Message {\n  role: 'system' | 'user' | 'assistant' | 'tool';\n  content: string | MessageContent[];\n  name?: string;\n  tool_calls?: ToolCall[];\n  tool_call_id?: string;\n}\n\nexport interface MessageContent {\n  type: 'text' | 'image_url';\n  text?: string;\n  image_url?: {\n    url: string;\n    detail?: 'low' | 'high' | 'auto';\n  };\n}\n\nexport interface ToolCall {\n  id: string;\n  type: 'function';\n  function: {\n    name: string;\n    arguments: string;\n  };\n}\n\n// Chat Completion Types\nexport interface ChatCompletionRequest {\n  messages: Message[];\n  model?: string;\n  temperature?: number;\n  max_tokens?: number;\n  top_p?: number;\n  frequency_penalty?: number;\n  presence_penalty?: number;\n  stop?: string | string[];\n  stream?: boolean;\n  tools?: Tool[];\n  tool_choice?: 'none' | 'auto' | { type: 'function'; function: { name: string } };\n  user?: string;\n}\n\nexport interface Tool {\n  type: 'function';\n  function: {\n    name: string;\n    description?: string;\n    parameters?: Record<string, any>;\n  };\n}\n\nexport interface ChatCompletionResponse {\n  id: string;\n  object: 'chat.completion';\n  created: number;\n  model: string;\n  provider: ApiProvider;\n  choices: ChatChoice[];\n  usage: Usage;\n  system_fingerprint?: string;\n}\n\nexport interface ChatChoice {\n  index: number;\n  message: Message;\n  finish_reason: 'stop' | 'length' | 'tool_calls' | 'content_filter' | null;\n  logprobs?: ChatCompletionLogprobs | null;\n}\n\nexport interface ChatCompletionLogprobs {\n  content: ChatCompletionTokenLogprob[] | null;\n}\n\nexport interface ChatCompletionTokenLogprob {\n  token: string;\n  logprob: number;\n  bytes: number[] | null;\n  top_logprobs: TopLogprob[];\n}\n\nexport interface TopLogprob {\n  token: string;\n  logprob: number;\n  bytes: number[] | null;\n}\n\nexport interface Usage {\n  prompt_tokens: number;\n  completion_tokens: number;\n  total_tokens: number;\n  estimated_cost: number;\n}\n\n// Streaming Types\nexport interface ChatCompletionChunk {\n  id: string;\n  object: 'chat.completion.chunk';\n  created: number;\n  model: string;\n  provider: ApiProvider;\n  choices: ChatChunkChoice[];\n  usage?: Usage;\n}\n\nexport interface ChatChunkChoice {\n  index: number;\n  delta: {\n    role?: 'assistant';\n    content?: string;\n    tool_calls?: ToolCall[];\n  };\n  finish_reason: 'stop' | 'length' | 'tool_calls' | 'content_filter' | null;\n}\n\n// Image Generation Types\nexport interface ImageGenerationRequest {\n  prompt: string;\n  model?: string;\n  n?: number;\n  size?: '256x256' | '512x512' | '1024x1024' | '1792x1024' | '1024x1792';\n  quality?: 'standard' | 'hd';\n  style?: 'vivid' | 'natural';\n  response_format?: 'url' | 'b64_json';\n  user?: string;\n}\n\nexport interface ImageGenerationResponse {\n  created: number;\n  data: ImageData[];\n  provider: ApiProvider;\n  usage?: {\n    estimated_cost: number;\n  };\n}\n\nexport interface ImageData {\n  url?: string;\n  b64_json?: string;\n  revised_prompt?: string;\n}\n\n// Provider Configuration Types\nexport interface ProviderConfig extends BaseConfig {\n  provider: ApiProvider;\n  model: string;\n  defaultParams?: Record<string, any>;\n}\n\nexport interface ProviderCapabilities {\n  chatCompletion: boolean;\n  streamingCompletion: boolean;\n  functionCalling: boolean;\n  imageGeneration: boolean;\n  imageAnalysis: boolean;\n  jsonMode: boolean;\n  systemMessages: boolean;\n  toolUse: boolean;\n  multipleMessages: boolean;\n  maxContextTokens: number;\n  supportedModels: string[];\n}\n\n// Error Types\nexport interface SDKError extends Error {\n  code: string;\n  statusCode?: number;\n  provider?: ApiProvider;\n  requestId?: string;\n  details?: Record<string, any>;\n}\n\nexport interface RateLimitError extends SDKError {\n  code: 'RATE_LIMIT_EXCEEDED';\n  retryAfter?: number;\n  limitType: 'requests' | 'tokens' | 'cost';\n}\n\nexport interface AuthenticationError extends SDKError {\n  code: 'AUTHENTICATION_FAILED';\n  provider: ApiProvider;\n}\n\nexport interface ValidationError extends SDKError {\n  code: 'VALIDATION_ERROR';\n  field: string;\n  value: any;\n}\n\n// Provider Selection Types\nexport interface ProviderConstraints {\n  maxCost?: number;\n  maxLatency?: number;\n  qualityThreshold?: number;\n  requiredCapabilities?: (keyof ProviderCapabilities)[];\n  excludeProviders?: ApiProvider[];\n  preferredProviders?: ApiProvider[];\n}\n\nexport interface ProviderSelection {\n  provider: ApiProvider;\n  model: string;\n  estimatedCost: number;\n  estimatedLatency: number;\n  qualityScore: number;\n  reasoning: string;\n}\n\n// Usage Tracking Types\nexport interface UsageMetrics {\n  requests: number;\n  tokens: {\n    input: number;\n    output: number;\n    total: number;\n  };\n  cost: number;\n  latency: {\n    avg: number;\n    p95: number;\n    p99: number;\n  };\n  errors: {\n    total: number;\n    rate: number;\n    byCode: Record<string, number>;\n  };\n}\n\nexport interface RequestMetrics {\n  requestId: string;\n  provider: ApiProvider;\n  model: string;\n  startTime: number;\n  endTime: number;\n  tokens: Usage;\n  cost: number;\n  success: boolean;\n  error?: SDKError;\n}\n\n// SDK Configuration Types\nexport interface SDKConfig {\n  apiKey?: string;\n  baseURL?: string;\n  defaultProvider?: ApiProvider;\n  defaultModel?: string;\n  providers?: Record<ApiProvider, ProviderConfig>;\n  enableUsageTracking?: boolean;\n  enableRetries?: boolean;\n  maxRetries?: number;\n  retryDelay?: number;\n  timeout?: number;\n  userAgent?: string;\n  debug?: boolean;\n}\n\n// Model Information Types\nexport interface ModelInfo {\n  id: string;\n  provider: ApiProvider;\n  name: string;\n  description?: string;\n  contextWindow: number;\n  maxOutputTokens: number;\n  capabilities: ProviderCapabilities;\n  pricing: {\n    input: number; // per 1k tokens\n    output: number; // per 1k tokens\n  };\n  deprecated?: boolean;\n  deprecationDate?: string;\n}\n\n// Export utility types\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n// Type guards\nexport function isSDKError(error: any): error is SDKError {\n  return error && typeof error === 'object' && 'code' in error && typeof error.code === 'string';\n}\n\nexport function isRateLimitError(error: any): error is RateLimitError {\n  return isSDKError(error) && error.code === 'RATE_LIMIT_EXCEEDED';\n}\n\nexport function isAuthenticationError(error: any): error is AuthenticationError {\n  return isSDKError(error) && error.code === 'AUTHENTICATION_FAILED';\n}\n\nexport function isValidationError(error: any): error is ValidationError {\n  return isSDKError(error) && error.code === 'VALIDATION_ERROR';\n}\n\n// Constants\nexport const SUPPORTED_PROVIDERS: ApiProvider[] = [\n  'openai',\n  'anthropic',\n  'claude',\n  'google',\n  'azure',\n  'cohere',\n  'huggingface'\n];\n\nexport const DEFAULT_MODELS: Record<ApiProvider, string> = {\n  openai: 'gpt-4o',\n  anthropic: 'claude-3-5-sonnet-20241022',\n  claude: 'claude-3-5-sonnet-20241022',\n  google: 'gemini-pro',\n  azure: 'gpt-4',\n  cohere: 'command-r-plus',\n  huggingface: 'meta-llama/Llama-2-70b-chat-hf'\n};\n\nexport const PROVIDER_CAPABILITIES: Record<ApiProvider, ProviderCapabilities> = {\n  openai: {\n    chatCompletion: true,\n    streamingCompletion: true,\n    functionCalling: true,\n    imageGeneration: true,\n    imageAnalysis: true,\n    jsonMode: true,\n    systemMessages: true,\n    toolUse: true,\n    multipleMessages: true,\n    maxContextTokens: 128000,\n    supportedModels: ['gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo', 'gpt-4', 'gpt-3.5-turbo']\n  },\n  anthropic: {\n    chatCompletion: true,\n    streamingCompletion: true,\n    functionCalling: true,\n    imageGeneration: false,\n    imageAnalysis: true,\n    jsonMode: false,\n    systemMessages: true,\n    toolUse: true,\n    multipleMessages: true,\n    maxContextTokens: 200000,\n    supportedModels: ['claude-3-5-sonnet-20241022', 'claude-3-5-haiku-20241022', 'claude-3-opus-20240229']\n  },\n  claude: {\n    chatCompletion: true,\n    streamingCompletion: true,\n    functionCalling: true,\n    imageGeneration: false,\n    imageAnalysis: true,\n    jsonMode: false,\n    systemMessages: true,\n    toolUse: true,\n    multipleMessages: true,\n    maxContextTokens: 200000,\n    supportedModels: ['claude-3-5-sonnet-20241022', 'claude-3-5-haiku-20241022', 'claude-3-opus-20240229']\n  },\n  google: {\n    chatCompletion: true,\n    streamingCompletion: true,\n    functionCalling: false,\n    imageGeneration: false,\n    imageAnalysis: true,\n    jsonMode: false,\n    systemMessages: false,\n    toolUse: false,\n    multipleMessages: true,\n    maxContextTokens: 1000000,\n    supportedModels: ['gemini-1.5-pro', 'gemini-1.5-flash', 'gemini-pro', 'gemini-pro-vision']\n  },\n  azure: {\n    chatCompletion: true,\n    streamingCompletion: true,\n    functionCalling: true,\n    imageGeneration: true,\n    imageAnalysis: true,\n    jsonMode: true,\n    systemMessages: true,\n    toolUse: true,\n    multipleMessages: true,\n    maxContextTokens: 128000,\n    supportedModels: ['gpt-4', 'gpt-3.5-turbo']\n  },\n  cohere: {\n    chatCompletion: true,\n    streamingCompletion: true,\n    functionCalling: true,\n    imageGeneration: false,\n    imageAnalysis: false,\n    jsonMode: false,\n    systemMessages: true,\n    toolUse: true,\n    multipleMessages: true,\n    maxContextTokens: 128000,\n    supportedModels: ['command-r-plus', 'command-r']\n  },\n  huggingface: {\n    chatCompletion: true,\n    streamingCompletion: true,\n    functionCalling: false,\n    imageGeneration: false,\n    imageAnalysis: false,\n    jsonMode: false,\n    systemMessages: true,\n    toolUse: false,\n    multipleMessages: true,\n    maxContextTokens: 4096,\n    supportedModels: ['meta-llama/Llama-2-70b-chat-hf']\n  }\n};","/**\n * Base Provider Interface and Abstract Implementation\n * \n * Defines the unified interface that all AI providers must implement\n */\n\nimport type {\n  ApiProvider,\n  ChatCompletionRequest,\n  ChatCompletionResponse,\n  ChatCompletionChunk,\n  ImageGenerationRequest,\n  ImageGenerationResponse,\n  ProviderConfig,\n  ProviderCapabilities,\n  SDKError,\n  RequestMetrics,\n  Usage\n} from '../types';\n\nimport { RetryHandler, CircuitBreaker, withTimeout } from '../utils/errors';\n\nexport interface BaseProviderOptions {\n  apiKey?: string;\n  baseURL?: string;\n  timeout?: number;\n  maxRetries?: number;\n  retryDelay?: number;\n  userAgent?: string;\n  debug?: boolean;\n}\n\n/**\n * Abstract base class for all AI providers\n */\nexport abstract class BaseProvider {\n  protected readonly provider: ApiProvider;\n  protected readonly config: ProviderConfig;\n  protected readonly retryHandler: RetryHandler;\n  protected readonly circuitBreaker: CircuitBreaker;\n\n  constructor(provider: ApiProvider, config: ProviderConfig) {\n    this.provider = provider;\n    this.config = config;\n    this.retryHandler = new RetryHandler({\n      maxRetries: config.maxRetries || 3,\n      baseDelay: config.retryDelay || 1000\n    });\n    this.circuitBreaker = new CircuitBreaker();\n  }\n\n  /**\n   * Provider capabilities - must be implemented by each provider\n   */\n  abstract getCapabilities(): ProviderCapabilities;\n\n  /**\n   * Chat completion - core method all providers must implement\n   */\n  abstract chatCompletion(request: ChatCompletionRequest): Promise<ChatCompletionResponse>;\n\n  /**\n   * Streaming chat completion - optional, defaults to error\n   */\n  abstract streamChatCompletion(\n    request: ChatCompletionRequest\n  ): AsyncGenerator<ChatCompletionChunk, void, unknown>;\n\n  /**\n   * Image generation - optional, defaults to error if not supported\n   */\n  generateImages(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {\n    throw new Error(`Image generation not supported by ${this.provider} provider`);\n  }\n\n  /**\n   * Provider-specific model validation\n   */\n  abstract validateModel(model: string): boolean;\n\n  /**\n   * Get available models for this provider\n   */\n  abstract getAvailableModels(): string[];\n\n  /**\n   * Estimate cost for a request\n   */\n  abstract estimateCost(request: ChatCompletionRequest): number;\n\n  /**\n   * Transform provider-specific response to unified format\n   */\n  protected abstract transformResponse(\n    response: any,\n    request: ChatCompletionRequest,\n    metrics: Partial<RequestMetrics>\n  ): ChatCompletionResponse;\n\n  /**\n   * Transform provider-specific streaming response to unified format\n   */\n  protected abstract transformStreamChunk(\n    chunk: any,\n    request: ChatCompletionRequest\n  ): ChatCompletionChunk | null;\n\n  /**\n   * Execute request with retry logic and circuit breaker\n   */\n  protected async executeWithRetry<T>(\n    fn: () => Promise<T>,\n    context?: {\n      requestId?: string;\n      operation?: string;\n    }\n  ): Promise<T> {\n    const requestId = context?.requestId || this.generateRequestId();\n    \n    return this.circuitBreaker.execute(async () => {\n      return this.retryHandler.execute(fn, {\n        provider: this.provider,\n        requestId,\n        operation: context?.operation\n      });\n    });\n  }\n\n  /**\n   * Execute request with timeout\n   */\n  protected async executeWithTimeout<T>(\n    promise: Promise<T>,\n    operation: string\n  ): Promise<T> {\n    const timeout = this.config.timeout || 30000; // 30 seconds default\n    \n    return withTimeout(promise, timeout, {\n      operation,\n      provider: this.provider\n    });\n  }\n\n  /**\n   * Create request metrics for tracking\n   */\n  protected createRequestMetrics(\n    requestId: string,\n    model: string,\n    startTime: number\n  ): Partial<RequestMetrics> {\n    return {\n      requestId,\n      provider: this.provider,\n      model,\n      startTime,\n      endTime: 0,\n      tokens: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0, estimated_cost: 0 },\n      cost: 0,\n      success: false\n    };\n  }\n\n  /**\n   * Finalize request metrics\n   */\n  protected finalizeMetrics(\n    metrics: Partial<RequestMetrics>,\n    usage: Usage,\n    success: boolean,\n    error?: SDKError\n  ): RequestMetrics {\n    return {\n      ...metrics,\n      endTime: Date.now(),\n      tokens: usage,\n      cost: usage.estimated_cost,\n      success,\n      error\n    } as RequestMetrics;\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  protected generateRequestId(): string {\n    return `${this.provider}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate API key format for this provider\n   */\n  protected abstract validateApiKey(apiKey: string): boolean;\n\n  /**\n   * Get default headers for requests\n   */\n  protected getDefaultHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'User-Agent': this.config.userAgent || `ai-marketplace-sdk/0.1.0 (${this.provider})`\n    };\n\n    if (this.config.apiKey) {\n      headers['Authorization'] = this.getAuthHeader(this.config.apiKey);\n    }\n\n    return headers;\n  }\n\n  /**\n   * Get provider-specific authorization header\n   */\n  protected abstract getAuthHeader(apiKey: string): string;\n\n  /**\n   * Health check for the provider\n   */\n  async healthCheck(): Promise<{\n    provider: ApiProvider;\n    healthy: boolean;\n    latency?: number;\n    error?: string;\n    capabilities: ProviderCapabilities;\n    circuitBreakerStatus: any;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Simple test request to verify provider is accessible\n      await this.executeWithTimeout(\n        this.testConnection(),\n        'health_check'\n      );\n\n      return {\n        provider: (this.provider === 'anthropic' ? 'claude' : this.provider) as ApiProvider,\n        healthy: true,\n        latency: Date.now() - startTime,\n        capabilities: this.getCapabilities(),\n        circuitBreakerStatus: this.circuitBreaker.getStatus()\n      };\n    } catch (error) {\n      return {\n        provider: (this.provider === 'anthropic' ? 'claude' : this.provider) as ApiProvider,\n        healthy: false,\n        latency: Date.now() - startTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        capabilities: this.getCapabilities(),\n        circuitBreakerStatus: this.circuitBreaker.getStatus()\n      };\n    }\n  }\n\n  /**\n   * Test connection to provider - should be implemented by each provider\n   */\n  protected abstract testConnection(): Promise<void>;\n\n  /**\n   * Get provider configuration (without sensitive data)\n   */\n  getConfig(): Omit<ProviderConfig, 'apiKey'> {\n    const { apiKey, ...safeConfig } = this.config;\n    return safeConfig;\n  }\n\n  /**\n   * Update provider configuration\n   */\n  updateConfig(updates: Partial<BaseProviderOptions>): void {\n    Object.assign(this.config, updates);\n  }\n}\n\n/**\n * Provider factory interface\n */\nexport interface ProviderFactory {\n  create(config: ProviderConfig): BaseProvider;\n  supports(provider: ApiProvider): boolean;\n}\n\n/**\n * Provider registry for managing multiple providers\n */\nexport class ProviderRegistry {\n  private factories = new Map<ApiProvider, ProviderFactory>();\n  private instances = new Map<string, BaseProvider>();\n\n  /**\n   * Register a provider factory\n   */\n  register(provider: ApiProvider, factory: ProviderFactory): void {\n    this.factories.set(provider, factory);\n  }\n\n  /**\n   * Get or create a provider instance\n   */\n  getProvider(config: ProviderConfig): BaseProvider {\n    const key = `${config.provider}-${config.model}`;\n    \n    if (this.instances.has(key)) {\n      const existing = this.instances.get(key)!;\n      // If an apiKey is explicitly provided, prefer a fresh instance to ensure\n      // provider-specific clients pick up new credentials immediately.\n      if ((config as any).apiKey) {\n        const factory = this.factories.get(config.provider);\n        if (!factory) {\n          throw new Error(`No factory registered for provider: ${config.provider}`);\n        }\n        const instance = factory.create(config);\n        this.instances.set(key, instance);\n        return instance;\n      }\n      return existing;\n    }\n\n    const factory = this.factories.get(config.provider);\n    if (!factory) {\n      throw new Error(`No factory registered for provider: ${config.provider}`);\n    }\n\n    const instance = factory.create(config);\n    this.instances.set(key, instance);\n    return instance;\n  }\n\n  /**\n   * Get all registered providers\n   */\n  getRegisteredProviders(): ApiProvider[] {\n    return Array.from(this.factories.keys());\n  }\n\n  /**\n   * Check if provider is supported\n   */\n  supports(provider: ApiProvider): boolean {\n    return this.factories.has(provider);\n  }\n\n  /**\n   * Clear all cached instances\n   */\n  clearCache(): void {\n    this.instances.clear();\n  }\n\n  /**\n   * Health check all providers\n   */\n  async healthCheckAll(): Promise<Record<string, any>> {\n    const results: Record<string, any> = {};\n    \n    for (const [provider, factory] of this.factories) {\n      try {\n        // Create a test instance with minimal config using a sensible default model\n        const { DEFAULT_MODELS } = await import('../types');\n        const defaultModel = (DEFAULT_MODELS as any)[provider] || 'test';\n\n        const testInstance = factory.create({\n          provider,\n          model: defaultModel,\n          apiKey: 'test',\n          timeout: 3000\n        });\n        \n        results[provider] = await testInstance.healthCheck();\n      } catch (error) {\n        results[provider] = {\n          provider,\n          healthy: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        };\n      }\n    }\n\n    return results;\n  }\n}\n\n// Global provider registry instance\nexport const providerRegistry = new ProviderRegistry();","/**\n * Chat Module - Unified Chat Interface\n * \n * Provides high-level chat interface with provider abstraction and intelligent routing\n */\n\nimport type {\n  ChatCompletionRequest,\n  ChatCompletionResponse,\n  ChatCompletionChunk,\n  ProviderConfig,\n  ProviderConstraints,\n  ProviderSelection,\n  Message,\n  Tool,\n  ApiProvider\n} from '../types';\n\nimport { providerRegistry } from '../providers/base';\nimport { BaseSDKError } from '../utils/errors';\n\nexport interface ChatOptions {\n  provider?: ProviderConfig;\n  constraints?: ProviderConstraints;\n  enableAutoRetry?: boolean;\n  enableFallback?: boolean;\n  trackUsage?: boolean;\n  apiKeys?: Partial<Record<ApiProvider, string>>;\n  resolveApiKey?: (provider: ApiProvider) => Promise<string | undefined> | string | undefined;\n}\n\n/**\n * High-level Chat interface with provider abstraction\n */\nexport class Chat {\n  private defaultProvider?: ProviderConfig;\n  private options: ChatOptions;\n\n  constructor(options: ChatOptions = {}) {\n    this.options = {\n      enableAutoRetry: true,\n      enableFallback: false,\n      trackUsage: true,\n      ...options\n    };\n    \n    this.defaultProvider = options.provider;\n  }\n\n  /**\n   * Complete a chat conversation\n   */\n  async complete(\n    request: ChatCompletionRequest,\n    options?: Partial<ChatOptions>\n  ): Promise<ChatCompletionResponse> {\n    const mergedOptions = { ...this.options, ...options };\n    \n    // Select optimal provider\n    let providerConfig = await this.selectProvider(request, mergedOptions);\n    providerConfig = await this.withResolvedApiKey(providerConfig, mergedOptions);\n\n    // Ensure model is set on the request (providers expect it)\n    const requestWithModel: ChatCompletionRequest = {\n      ...request,\n      model: request.model || providerConfig.model\n    };\n    \n    // Get provider instance (normalize auth construction errors)\n    let provider;\n    try {\n      provider = providerRegistry.getProvider(providerConfig);\n    } catch (e: any) {\n      const message = String(e?.message || '');\n      if (message.includes('API key is required') || message.includes('Invalid API key')) {\n        const { SDKAuthenticationError } = await import('../utils/errors');\n        throw new SDKAuthenticationError('Invalid API key', providerConfig.provider as any, { statusCode: 401 });\n      }\n      throw e;\n    }\n    \n    try {\n      return await provider.chatCompletion(requestWithModel);\n    } catch (error) {\n      // Handle fallback if enabled\n      if (mergedOptions.enableFallback && this.shouldFallback(error)) {\n        return this.executeWithFallback(requestWithModel, providerConfig, mergedOptions);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Stream a chat conversation\n   */\n  async* stream(\n    request: ChatCompletionRequest,\n    options?: Partial<ChatOptions>\n  ): AsyncGenerator<ChatCompletionChunk, void, unknown> {\n    const mergedOptions = { ...this.options, ...options };\n    \n    // Select optimal provider\n    let providerConfig = await this.selectProvider(request, mergedOptions);\n    providerConfig = await this.withResolvedApiKey(providerConfig, mergedOptions);\n\n    const requestWithModel: ChatCompletionRequest = {\n      ...request,\n      model: request.model || providerConfig.model\n    };\n    \n    // Get provider instance (normalize auth construction errors)\n    let provider;\n    try {\n      provider = providerRegistry.getProvider(providerConfig);\n    } catch (e: any) {\n      const message = String(e?.message || '');\n      if (message.includes('API key is required') || message.includes('Invalid API key')) {\n        const { SDKAuthenticationError } = await import('../utils/errors');\n        throw new SDKAuthenticationError('Invalid API key', providerConfig.provider as any, { statusCode: 401 });\n      }\n      throw e;\n    }\n    \n    try {\n      yield* provider.streamChatCompletion(requestWithModel);\n    } catch (error) {\n      // Fallback for streaming is more complex, for now just throw\n      throw error;\n    }\n  }\n\n  /**\n   * Simple text completion (convenience method)\n   */\n  async ask(\n    message: string,\n    options?: {\n      system?: string;\n      temperature?: number;\n      maxTokens?: number;\n    } & Partial<ChatOptions>\n  ): Promise<string> {\n    const messages: Message[] = [];\n    \n    if (options?.system) {\n      messages.push({ role: 'system', content: options.system });\n    }\n    \n    messages.push({ role: 'user', content: message });\n\n    const request: ChatCompletionRequest = {\n      messages,\n      ...(options?.temperature && { temperature: options.temperature }),\n      ...(options?.maxTokens && { max_tokens: options.maxTokens })\n    };\n\n    const response = await this.complete(request, options);\n    const content = response.choices[0]?.message.content || '';\n    return typeof content === 'string' ? content : JSON.stringify(content);\n  }\n\n  /**\n   * Chat with conversation history\n   */\n  async chat(\n    messages: Message[],\n    options?: {\n      temperature?: number;\n      maxTokens?: number;\n      tools?: Tool[];\n    } & Partial<ChatOptions>\n  ): Promise<ChatCompletionResponse> {\n    const request: ChatCompletionRequest = {\n      messages,\n      ...(options?.temperature && { temperature: options.temperature }),\n      ...(options?.maxTokens && { max_tokens: options.maxTokens }),\n      ...(options?.tools && { tools: options.tools })\n    };\n\n    return this.complete(request, options);\n  }\n\n  /**\n   * Create a conversation instance for stateful chat\n   */\n  conversation(options?: {\n    system?: string;\n    temperature?: number;\n    maxTokens?: number;\n  } & Partial<ChatOptions>): Conversation {\n    return new Conversation(this, options);\n  }\n\n  /**\n   * Select optimal provider based on request and constraints\n   */\n  private async selectProvider(\n    request: ChatCompletionRequest,\n    options: ChatOptions\n  ): Promise<ProviderConfig> {\n    // Use explicit provider if specified\n    if (options.provider) {\n      return options.provider;\n    }\n\n    // Use default provider if no constraints\n    if (this.defaultProvider && !options.constraints) {\n      return this.defaultProvider;\n    }\n\n    // Implement intelligent provider selection\n    return this.intelligentProviderSelection(request, options.constraints);\n  }\n\n  /**\n   * Intelligent provider selection based on constraints and request characteristics\n   */\n  private async intelligentProviderSelection(\n    request: ChatCompletionRequest,\n    constraints?: ProviderConstraints\n  ): Promise<ProviderConfig> {\n    const supportedProviders = providerRegistry.getRegisteredProviders();\n    const candidates: ProviderSelection[] = [];\n\n    for (const provider of supportedProviders) {\n      // Skip excluded providers\n      if (constraints?.excludeProviders?.includes(provider)) {\n        continue;\n      }\n\n      // Get provider instance for evaluation\n      const config: ProviderConfig = {\n        provider,\n        model: this.getDefaultModel(provider),\n        // Use a placeholder key so providers can be instantiated for capability/cost evaluation\n        apiKey: 'test'\n      };\n\n      const providerInstance = providerRegistry.getProvider(config);\n      const capabilities = providerInstance.getCapabilities();\n\n      // Check required capabilities\n      if (constraints?.requiredCapabilities) {\n        const hasRequired = constraints.requiredCapabilities.every(\n          cap => capabilities[cap] === true\n        );\n        if (!hasRequired) continue;\n      }\n\n      // Estimate cost and quality\n      const estimatedCost = providerInstance.estimateCost(request);\n      const estimatedLatency = this.estimateLatency(provider);\n      const qualityScore = this.calculateQualityScore(provider, request);\n\n      // Apply constraints (bypass cost/latency/quality if preferred)\n      const isPreferred = constraints?.preferredProviders?.includes(provider) ?? false;\n      if (!isPreferred) {\n        if (constraints?.maxCost && estimatedCost > constraints.maxCost) {\n          continue;\n        }\n        if (constraints?.maxLatency && estimatedLatency > constraints.maxLatency) {\n          continue;\n        }\n        if (constraints?.qualityThreshold && qualityScore < constraints.qualityThreshold) {\n          continue;\n        }\n      }\n\n      candidates.push({\n        provider,\n        model: config.model,\n        estimatedCost,\n        estimatedLatency,\n        qualityScore,\n        reasoning: this.generateSelectionReasoning(provider, estimatedCost, qualityScore)\n      });\n    }\n\n    if (candidates.length === 0) {\n      throw new BaseSDKError(\n        'No providers meet the specified constraints',\n        'NO_SUITABLE_PROVIDER',\n        { details: { constraints } }\n      );\n    }\n\n    // Select best candidate (optimize for cost/quality ratio)\n    const bestCandidate = candidates.reduce((best, current) => {\n      const bestScore = best.qualityScore / best.estimatedCost;\n      const currentScore = current.qualityScore / current.estimatedCost;\n      return currentScore > bestScore ? current : best;\n    });\n\n    // Check for preferred providers (prioritize even if not best score)\n    if (constraints?.preferredProviders) {\n      const preferredCandidate = candidates.find(c => constraints.preferredProviders!.includes(c.provider));\n      if (preferredCandidate) {\n        return { provider: preferredCandidate.provider, model: preferredCandidate.model, apiKey: '' };\n      }\n    }\n\n    return {\n      provider: bestCandidate.provider,\n      model: bestCandidate.model,\n      apiKey: '' // Will be resolved later\n    };\n  }\n\n  /**\n   * Execute request with fallback providers\n   */\n  private async executeWithFallback(\n    request: ChatCompletionRequest,\n    failedProvider: ProviderConfig,\n    options: ChatOptions\n  ): Promise<ChatCompletionResponse> {\n    const fallbackProviders = this.getFallbackProviders(failedProvider);\n    \n    for (const provider of fallbackProviders) {\n      try {\n        const resolved = await this.withResolvedApiKey(provider, options);\n        const providerInstance = providerRegistry.getProvider(resolved);\n        const requestWithModel: ChatCompletionRequest = {\n          ...request,\n          model: request.model || resolved.model\n        };\n        return await providerInstance.chatCompletion(requestWithModel);\n      } catch (error) {\n        // Continue to next fallback\n        continue;\n      }\n    }\n\n    throw new BaseSDKError(\n      'All fallback providers failed',\n      'ALL_PROVIDERS_FAILED',\n      { details: { originalProvider: failedProvider.provider } }\n    );\n  }\n\n  /**\n   * Determine if error should trigger fallback\n   */\n  private shouldFallback(error: any): boolean {\n    // Fallback on rate limits, server errors, but not auth/validation errors\n    if (error.code === 'RATE_LIMIT_EXCEEDED') return true;\n    if (error.statusCode && error.statusCode >= 500) return true;\n    if (error.code === 'NETWORK_ERROR') return true;\n    return false;\n  }\n\n  /**\n   * Get fallback providers for a failed provider\n   */\n  private getFallbackProviders(failedProvider: ProviderConfig): ProviderConfig[] {\n    const fallbackMap: Record<string, string[]> = {\n      'openai': ['claude'],\n      'claude': ['openai'],\n      'google': ['openai', 'claude'],\n      'azure': ['openai', 'claude'],\n      'cohere': ['openai', 'claude'],\n      'huggingface': ['openai', 'claude']\n    };\n\n    const fallbacks = fallbackMap[failedProvider.provider] || ['openai'];\n    return fallbacks.map(provider => ({\n      provider: provider as any,\n      model: this.getDefaultModel(provider as any),\n      apiKey: 'test' // placeholder; will be resolved before use\n    }));\n  }\n\n  /**\n   * Get default model for provider\n   */\n  private getDefaultModel(provider: string): string {\n    const defaultModels: Record<string, string> = {\n      'openai': 'gpt-4o',\n      'claude': 'claude-3-5-sonnet-20241022',\n      'google': 'gemini-pro',\n      'azure': 'gpt-4',\n      'cohere': 'command-r-plus',\n      'huggingface': 'meta-llama/Llama-2-70b-chat-hf'\n    };\n    return defaultModels[provider] || 'gpt-4o';\n  }\n\n  /**\n   * Estimate latency for provider (placeholder implementation)\n   */\n  private estimateLatency(provider: string): number {\n    const latencyMap: Record<string, number> = {\n      'openai': 2000,\n      'claude': 3000,\n      'google': 1500,\n      'azure': 2500,\n      'cohere': 2000,\n      'huggingface': 4000\n    };\n    return latencyMap[provider] || 2000;\n  }\n\n  /**\n   * Calculate quality score for provider (placeholder implementation)\n   */\n  private calculateQualityScore(provider: string, request: ChatCompletionRequest): number {\n    // Simple quality scoring based on provider capabilities\n    const qualityMap: Record<string, number> = {\n      'openai': 0.9,\n      'claude': 0.95,\n      'google': 0.8,\n      'azure': 0.9,\n      'cohere': 0.7,\n      'huggingface': 0.6\n    };\n    return qualityMap[provider] || 0.5;\n  }\n\n  /**\n   * Generate reasoning for provider selection\n   */\n  private generateSelectionReasoning(provider: string, cost: number, quality: number): string {\n    return `Selected ${provider} for optimal cost/quality ratio (cost: $${cost.toFixed(4)}, quality: ${quality.toFixed(2)})`;\n  }\n\n  /**\n   * Resolve API key for a provider using provided options\n   */\n  private async withResolvedApiKey(\n    config: ProviderConfig,\n    options: ChatOptions\n  ): Promise<ProviderConfig> {\n    if (config.apiKey && config.apiKey.trim().length > 0) return config;\n\n    const fromMap = options.apiKeys?.[config.provider as ApiProvider];\n    if (fromMap && fromMap.trim().length > 0) {\n      return { ...config, apiKey: fromMap };\n    }\n\n    if (options.resolveApiKey) {\n      const resolved = await options.resolveApiKey(config.provider as ApiProvider);\n      if (resolved && resolved.trim().length > 0) {\n        return { ...config, apiKey: resolved };\n      }\n    }\n\n    return config;\n  }\n}\n\n/**\n * Stateful conversation class\n */\nexport class Conversation {\n  private messages: Message[] = [];\n  private chat: Chat;\n  private options: any;\n\n  constructor(chat: Chat, options: any = {}) {\n    this.chat = chat;\n    this.options = options;\n\n    // Add system message if provided\n    if (options.system) {\n      this.messages.push({ role: 'system', content: options.system });\n    }\n  }\n\n  /**\n   * Send a message and get response\n   */\n  async say(message: string): Promise<string> {\n    this.messages.push({ role: 'user', content: message });\n\n    const response = await this.chat.chat(this.messages, this.options);\n    const assistantMessage = response.choices[0]?.message.content || '';\n\n    this.messages.push({ role: 'assistant', content: assistantMessage });\n\n    return assistantMessage;\n  }\n\n  /**\n   * Get conversation history\n   */\n  getHistory(): Message[] {\n    return [...this.messages];\n  }\n\n  /**\n   * Clear conversation history (keeping system message)\n   */\n  clear(): void {\n    const systemMessage = this.messages.find(m => m.role === 'system');\n    this.messages = systemMessage ? [systemMessage] : [];\n  }\n\n  /**\n   * Get conversation summary\n   */\n  async summarize(): Promise<string> {\n    if (this.messages.length < 3) {\n      return 'Conversation too short to summarize';\n    }\n\n    const summaryRequest: Message[] = [\n      { role: 'system', content: 'Summarize the following conversation concisely.' },\n      { role: 'user', content: JSON.stringify(this.messages) }\n    ];\n\n    const response = await this.chat.chat(summaryRequest, { ...this.options, maxTokens: 200 });\n    return response.choices[0]?.message.content || 'Unable to generate summary';\n  }\n}\n\n/**\n * Convenience function to create a Chat instance\n */\nexport function createChat(options?: ChatOptions): Chat {\n  return new Chat(options);\n}\n\n/**\n * Quick helper functions\n */\nexport async function ask(\n  message: string,\n  options?: {\n    provider?: ProviderConfig;\n    system?: string;\n    temperature?: number;\n  }\n): Promise<string> {\n  const chat = new Chat({ provider: options?.provider });\n  return chat.ask(message, options);\n}\n\nexport async function chat(\n  messages: Message[],\n  options?: {\n    provider?: ProviderConfig;\n    temperature?: number;\n    tools?: Tool[];\n  }\n): Promise<ChatCompletionResponse> {\n  const chatInstance = new Chat({ provider: options?.provider });\n  return chatInstance.chat(messages, options);\n}"]}