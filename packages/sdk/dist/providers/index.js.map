{"version":3,"sources":["../../src/utils/errors.ts","../../src/providers/base.ts","../../src/providers/openai.ts","../../src/providers/claude.ts","../../src/providers/index.ts"],"names":[],"mappings":";;;;;;;AAkBO,IAAM,YAAA,GAAN,cAA2B,KAAA,CAA0B;AAAA,EAO1D,WAAA,CACE,OAAA,EACA,IAAA,EACA,OAAA,EAOA;AACA,IAAA,KAAA,CAAM,OAAA,EAAS,EAAE,KAAA,EAAO,OAAA,EAAS,OAAO,CAAA;AAjB1C,IAAA,aAAA,CAAA,IAAA,EAAgB,MAAA,CAAA;AAChB,IAAA,aAAA,CAAA,IAAA,EAAgB,YAAA,CAAA;AAChB,IAAA,aAAA,CAAA,IAAA,EAAgB,UAAA,CAAA;AAChB,IAAA,aAAA,CAAA,IAAA,EAAgB,WAAA,CAAA;AAChB,IAAA,aAAA,CAAA,IAAA,EAAgB,SAAA,CAAA;AAcd,IAAA,IAAA,CAAK,IAAA,GAAO,KAAK,WAAA,CAAY,IAAA;AAC7B,IAAA,IAAA,CAAK,IAAA,GAAO,IAAA;AACZ,IAAA,IAAA,CAAK,aAAa,OAAA,EAAS,UAAA;AAC3B,IAAA,IAAA,CAAK,WAAW,OAAA,EAAS,QAAA;AACzB,IAAA,IAAA,CAAK,YAAY,OAAA,EAAS,SAAA;AAC1B,IAAA,IAAA,CAAK,UAAU,OAAA,EAAS,OAAA;AAGxB,IAAA,IAAI,MAAM,iBAAA,EAAmB;AAC3B,MAAA,KAAA,CAAM,iBAAA,CAAkB,IAAA,EAAM,IAAA,CAAK,WAAW,CAAA;AAAA,IAChD;AAAA,EACF;AACF,CAAA;AAEO,IAAM,iBAAA,GAAN,cAAgC,YAAA,CAAuC;AAAA,EAK5E,WAAA,CACE,OAAA,EACA,SAAA,EACA,OAAA,EAQA;AACA,IAAA,KAAA,CAAM,OAAA,EAAS,uBAAuB,OAAO,CAAA;AAhB/C,IAAA,aAAA,CAAA,IAAA,EAAgB,MAAA,EAAO,qBAAA,CAAA;AACvB,IAAA,aAAA,CAAA,IAAA,EAAgB,YAAA,CAAA;AAChB,IAAA,aAAA,CAAA,IAAA,EAAgB,WAAA,CAAA;AAed,IAAA,IAAA,CAAK,SAAA,GAAY,SAAA;AACjB,IAAA,IAAA,CAAK,aAAa,OAAA,EAAS,UAAA;AAAA,EAC7B;AACF,CAAA;AAEO,IAAM,sBAAA,GAAN,cAAqC,YAAA,CAA4C;AAAA,EAItF,WAAA,CACE,OAAA,EACA,QAAA,EACA,OAAA,EAMA;AACA,IAAA,KAAA,CAAM,SAAS,uBAAA,EAAyB,EAAE,GAAG,OAAA,EAAS,UAAU,CAAA;AAblE,IAAA,aAAA,CAAA,IAAA,EAAgB,MAAA,EAAO,uBAAA,CAAA;AACvB,IAAA,aAAA,CAAA,IAAA,EAAgB,UAAA,CAAA;AAad,IAAA,IAAA,CAAK,QAAA,GAAW,QAAA;AAAA,EAClB;AACF,CAAA;AAEO,IAAM,kBAAA,GAAN,cAAiC,YAAA,CAAwC;AAAA,EAK9E,WAAA,CACE,OAAA,EACA,KAAA,EACA,KAAA,EACA,OAAA,EAOA;AACA,IAAA,KAAA,CAAM,OAAA,EAAS,oBAAoB,OAAO,CAAA;AAhB5C,IAAA,aAAA,CAAA,IAAA,EAAgB,MAAA,EAAO,kBAAA,CAAA;AACvB,IAAA,aAAA,CAAA,IAAA,EAAgB,OAAA,CAAA;AAChB,IAAA,aAAA,CAAA,IAAA,EAAgB,OAAA,CAAA;AAed,IAAA,IAAA,CAAK,KAAA,GAAQ,KAAA;AACb,IAAA,IAAA,CAAK,KAAA,GAAQ,KAAA;AAAA,EACf;AACF,CAAA;AAKO,IAAM,eAAN,MAAmB;AAAA,EACxB,OAAO,iBAAA,CACL,KAAA,EACA,QAAA,EACA,SAAA,EACU;AAEV,IAAA,IAAI,aAAa,QAAA,EAAU;AACzB,MAAA,OAAO,IAAA,CAAK,eAAA,CAAgB,KAAA,EAAO,SAAS,CAAA;AAAA,IAC9C;AAGA,IAAA,IAAI,aAAa,QAAA,EAAU;AACzB,MAAA,OAAO,IAAA,CAAK,eAAA,CAAgB,KAAA,EAAO,SAAS,CAAA;AAAA,IAC9C;AAGA,IAAA,OAAO,IAAA,CAAK,gBAAA,CAAiB,KAAA,EAAO,QAAA,EAAU,SAAS,CAAA;AAAA,EACzD;AAAA,EAEA,OAAe,eAAA,CAAgB,KAAA,EAAY,SAAA,EAA8B;AACvE,IAAA,MAAM,UAAA,GAAa,KAAA,CAAM,MAAA,IAAU,KAAA,CAAM,UAAA,IAAc,GAAA;AACvD,IAAA,MAAM,OAAA,GAAU,KAAA,CAAM,OAAA,IAAW,KAAA,CAAM,OAAO,OAAA,IAAW,kBAAA;AAGzD,IAAA,IAAI,eAAe,GAAA,EAAK;AACtB,MAAA,MAAM,UAAA,GAAa,KAAA,CAAM,OAAA,GAAU,aAAa,CAAA,GAC5C,QAAA,CAAS,KAAA,CAAM,OAAA,CAAQ,aAAa,CAAA,EAAG,EAAE,CAAA,GACzC,MAAA;AAEJ,MAAA,OAAO,IAAI,iBAAA;AAAA,QACT,OAAA;AAAA,QACA,UAAA;AAAA,QACA;AAAA,UACE,UAAA;AAAA,UACA,UAAA;AAAA,UACA,QAAA,EAAU,QAAA;AAAA,UACV,SAAA;AAAA,UACA,OAAA,EAAS,EAAE,aAAA,EAAe,KAAA;AAAM;AAClC,OACF;AAAA,IACF;AAGA,IAAA,IAAI,eAAe,GAAA,EAAK;AACtB,MAAA,OAAO,IAAI,sBAAA;AAAA,QACT,OAAA;AAAA,QACA,QAAA;AAAA,QACA;AAAA,UACE,UAAA;AAAA,UACA,SAAA;AAAA,UACA,OAAA,EAAS,EAAE,aAAA,EAAe,KAAA;AAAM;AAClC,OACF;AAAA,IACF;AAGA,IAAA,IAAI,eAAe,GAAA,EAAK;AACtB,MAAA,OAAO,IAAI,kBAAA;AAAA,QACT,OAAA;AAAA,QACA,KAAA,CAAM,OAAO,KAAA,IAAS,SAAA;AAAA,QACtB,KAAA,CAAM,OAAO,IAAA,IAAQ,SAAA;AAAA,QACrB;AAAA,UACE,UAAA;AAAA,UACA,QAAA,EAAU,QAAA;AAAA,UACV,SAAA;AAAA,UACA,OAAA,EAAS,EAAE,aAAA,EAAe,KAAA;AAAM;AAClC,OACF;AAAA,IACF;AAGA,IAAA,OAAO,IAAI,YAAA;AAAA,MACT,OAAA;AAAA,MACA,kBAAA;AAAA,MACA;AAAA,QACE,UAAA;AAAA,QACA,QAAA,EAAU,QAAA;AAAA,QACV,SAAA;AAAA,QACA,OAAA,EAAS,EAAE,aAAA,EAAe,KAAA,EAAM;AAAA,QAChC,KAAA,EAAO;AAAA;AACT,KACF;AAAA,EACF;AAAA,EAEA,OAAe,eAAA,CAAgB,KAAA,EAAY,SAAA,EAA8B;AACvE,IAAA,MAAM,UAAA,GAAa,KAAA,CAAM,MAAA,IAAU,KAAA,CAAM,UAAA,IAAc,GAAA;AACvD,IAAA,MAAM,OAAA,GAAU,KAAA,CAAM,OAAA,IAAW,KAAA,CAAM,OAAO,OAAA,IAAW,kBAAA;AAGzD,IAAA,IAAI,eAAe,GAAA,EAAK;AACtB,MAAA,MAAM,UAAA,GAAa,KAAA,CAAM,OAAA,GAAU,aAAa,CAAA,GAC5C,QAAA,CAAS,KAAA,CAAM,OAAA,CAAQ,aAAa,CAAA,EAAG,EAAE,CAAA,GACzC,MAAA;AAEJ,MAAA,OAAO,IAAI,iBAAA;AAAA,QACT,OAAA;AAAA,QACA,UAAA;AAAA,QACA;AAAA,UACE,UAAA;AAAA,UACA,UAAA;AAAA,UACA,QAAA,EAAU,QAAA;AAAA,UACV,SAAA;AAAA,UACA,OAAA,EAAS,EAAE,aAAA,EAAe,KAAA;AAAM;AAClC,OACF;AAAA,IACF;AAGA,IAAA,IAAI,eAAe,GAAA,EAAK;AACtB,MAAA,OAAO,IAAI,sBAAA;AAAA,QACT,OAAA;AAAA,QACA,QAAA;AAAA,QACA;AAAA,UACE,UAAA;AAAA,UACA,SAAA;AAAA,UACA,OAAA,EAAS,EAAE,aAAA,EAAe,KAAA;AAAM;AAClC,OACF;AAAA,IACF;AAGA,IAAA,IAAI,eAAe,GAAA,EAAK;AACtB,MAAA,OAAO,IAAI,kBAAA;AAAA,QACT,OAAA;AAAA,QACA,KAAA,CAAM,OAAO,KAAA,IAAS,SAAA;AAAA,QACtB,KAAA,CAAM,OAAO,IAAA,IAAQ,SAAA;AAAA,QACrB;AAAA,UACE,UAAA;AAAA,UACA,QAAA,EAAU,QAAA;AAAA,UACV,SAAA;AAAA,UACA,OAAA,EAAS,EAAE,aAAA,EAAe,KAAA;AAAM;AAClC,OACF;AAAA,IACF;AAGA,IAAA,OAAO,IAAI,YAAA;AAAA,MACT,OAAA;AAAA,MACA,kBAAA;AAAA,MACA;AAAA,QACE,UAAA;AAAA,QACA,QAAA,EAAU,QAAA;AAAA,QACV,SAAA;AAAA,QACA,OAAA,EAAS,EAAE,aAAA,EAAe,KAAA,EAAM;AAAA,QAChC,KAAA,EAAO;AAAA;AACT,KACF;AAAA,EACF;AAAA,EAEA,OAAe,gBAAA,CACb,KAAA,EACA,QAAA,EACA,SAAA,EACU;AACV,IAAA,MAAM,UAAA,GAAa,KAAA,CAAM,MAAA,IAAU,KAAA,CAAM,UAAA,IAAc,GAAA;AACvD,IAAA,MAAM,OAAA,GAAU,KAAA,CAAM,OAAA,IAAW,CAAA,EAAG,QAAQ,CAAA,UAAA,CAAA;AAE5C,IAAA,OAAO,IAAI,YAAA;AAAA,MACT,OAAA;AAAA,MACA,WAAA;AAAA,MACA;AAAA,QACE,UAAA;AAAA,QACA,QAAA;AAAA,QACA,SAAA;AAAA,QACA,OAAA,EAAS,EAAE,aAAA,EAAe,KAAA,EAAM;AAAA,QAChC,KAAA,EAAO;AAAA;AACT,KACF;AAAA,EACF;AACF,CAAA;AAcO,IAAM,oBAAA,GAAoC;AAAA,EAC/C,UAAA,EAAY,CAAA;AAAA,EACZ,SAAA,EAAW,GAAA;AAAA;AAAA,EACX,QAAA,EAAU,GAAA;AAAA;AAAA,EACV,iBAAA,EAAmB,CAAA;AAAA,EACnB,MAAA,EAAQ,IAAA;AAAA,EACR,eAAA,EAAiB;AAAA,IACf,qBAAA;AAAA,IACA,eAAA;AAAA,IACA,SAAA;AAAA,IACA,cAAA;AAAA,IACA;AAAA;AAEJ,CAAA;AAEO,IAAM,eAAN,MAAmB;AAAA,EAGxB,WAAA,CAAY,MAAA,GAA+B,EAAC,EAAG;AAF/C,IAAA,aAAA,CAAA,IAAA,EAAQ,QAAA,CAAA;AAGN,IAAA,IAAA,CAAK,MAAA,GAAS,EAAE,GAAG,oBAAA,EAAsB,GAAG,MAAA,EAAO;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAA,CACJ,EAAA,EACA,OAAA,EAKY;AACZ,IAAA,IAAI,SAAA,GAA6B,IAAA;AACjC,IAAA,IAAI,OAAA,GAAU,CAAA;AAEd,IAAA,OAAO,OAAA,IAAW,IAAA,CAAK,MAAA,CAAO,UAAA,EAAY;AACxC,MAAA,IAAI;AACF,QAAA,OAAO,MAAM,EAAA,EAAG;AAAA,MAClB,SAAS,KAAA,EAAO;AACd,QAAA,SAAA,GAAY,iBAAiB,YAAA,GACzB,KAAA,GACA,KAAK,iBAAA,CAAkB,KAAA,EAAO,SAAS,QAAQ,CAAA;AAGnD,QAAA,IAAI,OAAA,KAAY,IAAA,CAAK,MAAA,CAAO,UAAA,EAAY;AACtC,UAAA;AAAA,QACF;AAGA,QAAA,IAAI,CAAC,IAAA,CAAK,gBAAA,CAAiB,SAAS,CAAA,EAAG;AACrC,UAAA;AAAA,QACF;AAGA,QAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,cAAA,CAAe,OAAA,EAAS,SAAS,CAAA;AAEpD,QAAA,OAAA,CAAQ,KAAK,CAAA,QAAA,EAAW,OAAA,GAAU,CAAC,CAAA,qBAAA,EAAwB,KAAK,CAAA,EAAA,CAAA,EAAM;AAAA,UACpE,OAAO,SAAA,CAAU,IAAA;AAAA,UACjB,UAAU,OAAA,EAAS,QAAA;AAAA,UACnB,WAAW,OAAA,EAAS,SAAA;AAAA,UACpB,WAAW,OAAA,EAAS;AAAA,SACrB,CAAA;AAED,QAAA,MAAM,IAAA,CAAK,MAAM,KAAK,CAAA;AACtB,QAAA,OAAA,EAAA;AAAA,MACF;AAAA,IACF;AAGA,IAAA,MAAM,SAAA;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAiB,KAAA,EAA0B;AAEjD,IAAA,IAAI,KAAA,CAAM,IAAA,KAAS,uBAAA,IAA2B,KAAA,CAAM,SAAS,kBAAA,EAAoB;AAC/E,MAAA,OAAO,KAAA;AAAA,IACT;AAGA,IAAA,IAAI,KAAA,CAAM,SAAS,qBAAA,EAAuB;AACxC,MAAA,OAAO,IAAA;AAAA,IACT;AAGA,IAAA,IAAI,KAAA,CAAM,UAAA,IAAc,KAAA,CAAM,UAAA,IAAc,GAAA,EAAK;AAC/C,MAAA,OAAO,IAAA;AAAA,IACT;AAGA,IAAA,IAAI,KAAK,MAAA,CAAO,eAAA,CAAgB,QAAA,CAAS,KAAA,CAAM,IAAI,CAAA,EAAG;AACpD,MAAA,OAAO,IAAA;AAAA,IACT;AAEA,IAAA,OAAO,KAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,cAAA,CAAe,SAAiB,KAAA,EAAyB;AAE/D,IAAA,IAAI,KAAA,YAAiB,iBAAA,IAAqB,KAAA,CAAM,UAAA,EAAY;AAC1D,MAAA,OAAO,MAAM,UAAA,GAAa,GAAA;AAAA,IAC5B;AAGA,IAAA,IAAI,KAAA,GAAQ,KAAK,MAAA,CAAO,SAAA,GAAY,KAAK,GAAA,CAAI,IAAA,CAAK,MAAA,CAAO,iBAAA,EAAmB,OAAO,CAAA;AAGnF,IAAA,KAAA,GAAQ,IAAA,CAAK,GAAA,CAAI,KAAA,EAAO,IAAA,CAAK,OAAO,QAAQ,CAAA;AAG5C,IAAA,IAAI,IAAA,CAAK,OAAO,MAAA,EAAQ;AACtB,MAAA,KAAA,GAAQ,KAAA,IAAS,GAAA,GAAM,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA,CAAA;AAAA,IACzC;AAEA,IAAA,OAAO,IAAA,CAAK,MAAM,KAAK,CAAA;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAA,CAAkB,OAAY,QAAA,EAAkC;AACtE,IAAA,IAAI,iBAAiB,YAAA,EAAc;AACjC,MAAA,OAAO,KAAA;AAAA,IACT;AAGA,IAAA,IAAI,KAAA,CAAM,SAAS,YAAA,IAAgB,KAAA,CAAM,SAAS,WAAA,IAAe,KAAA,CAAM,SAAS,WAAA,EAAa;AAC3F,MAAA,OAAO,IAAI,YAAA;AAAA,QACT,CAAA,eAAA,EAAkB,MAAM,OAAO,CAAA,CAAA;AAAA,QAC/B,eAAA;AAAA,QACA,EAAE,QAAA,EAAU,KAAA,EAAO,KAAA;AAAM,OAC3B;AAAA,IACF;AAGA,IAAA,OAAO,IAAI,YAAA;AAAA,MACT,MAAM,OAAA,IAAW,eAAA;AAAA,MACjB,eAAA;AAAA,MACA,EAAE,QAAA,EAAU,KAAA,EAAO,KAAA;AAAM,KAC3B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,MAAM,EAAA,EAA2B;AACvC,IAAA,OAAO,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,EAAE,CAAC,CAAA;AAAA,EACvD;AACF,CAAA;AAiBO,IAAM,iBAAN,MAAqB;AAAA,EAO1B,WAAA,CAAY,MAAA,GAAwC,EAAC,EAAG;AANxD,IAAA,aAAA,CAAA,IAAA,EAAQ,OAAA,EAAsB,QAAA,cAAA;AAC9B,IAAA,aAAA,CAAA,IAAA,EAAQ,UAAA,EAAmB,CAAA,CAAA;AAC3B,IAAA,aAAA,CAAA,IAAA,EAAQ,iBAAA,EAA0B,CAAA,CAAA;AAClC,IAAA,aAAA,CAAA,IAAA,EAAQ,aAAA,EAAsB,CAAA,CAAA;AAC9B,IAAA,aAAA,CAAA,IAAA,EAAQ,QAAA,CAAA;AAGN,IAAA,IAAA,CAAK,MAAA,GAAS;AAAA,MACZ,gBAAA,EAAkB,CAAA;AAAA,MAClB,eAAA,EAAiB,GAAA;AAAA;AAAA,MACjB,gBAAA,EAAkB,GAAA;AAAA;AAAA,MAClB,GAAG;AAAA,KACL;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAW,EAAA,EAAkC;AACjD,IAAA,IAAI,IAAA,CAAK,UAAU,MAAA,aAAmB;AACpC,MAAA,IAAI,IAAA,CAAK,GAAA,EAAI,GAAI,IAAA,CAAK,WAAA,EAAa;AACjC,QAAA,MAAM,IAAI,YAAA;AAAA,UACR,oDAAA;AAAA,UACA;AAAA,SACF;AAAA,MACF,CAAA,MAAO;AACL,QAAA,IAAA,CAAK,KAAA,GAAQ,WAAA;AAAA,MACf;AAAA,IACF;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,MAAA,GAAS,MAAM,EAAA,EAAG;AACxB,MAAA,IAAA,CAAK,SAAA,EAAU;AACf,MAAA,OAAO,MAAA;AAAA,IACT,SAAS,KAAA,EAAO;AACd,MAAA,IAAA,CAAK,SAAA,EAAU;AACf,MAAA,MAAM,KAAA;AAAA,IACR;AAAA,EACF;AAAA,EAEQ,SAAA,GAAkB;AACxB,IAAA,IAAA,CAAK,QAAA,GAAW,CAAA;AAChB,IAAA,IAAA,CAAK,KAAA,GAAQ,QAAA;AAAA,EACf;AAAA,EAEQ,SAAA,GAAkB;AACxB,IAAA,IAAA,CAAK,QAAA,EAAA;AACL,IAAA,IAAA,CAAK,eAAA,GAAkB,KAAK,GAAA,EAAI;AAEhC,IAAA,IAAI,IAAA,CAAK,QAAA,IAAY,IAAA,CAAK,MAAA,CAAO,gBAAA,EAAkB;AACjD,MAAA,IAAA,CAAK,KAAA,GAAQ,MAAA;AACb,MAAA,IAAA,CAAK,WAAA,GAAc,IAAA,CAAK,GAAA,EAAI,GAAI,KAAK,MAAA,CAAO,eAAA;AAAA,IAC9C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,SAAA,GAKE;AACA,IAAA,OAAO;AAAA,MACL,OAAO,IAAA,CAAK,KAAA;AAAA,MACZ,UAAU,IAAA,CAAK,QAAA;AAAA,MACf,iBAAiB,IAAA,CAAK,eAAA;AAAA,MACtB,aAAa,IAAA,CAAK;AAAA,KACpB;AAAA,EACF;AACF,CAAA;AAKO,SAAS,WAAA,CACd,OAAA,EACA,SAAA,EACA,OAAA,EACY;AACZ,EAAA,OAAO,QAAQ,IAAA,CAAK;AAAA,IAClB,OAAA;AAAA,IACA,IAAI,OAAA,CAAe,CAAC,CAAA,EAAG,MAAA,KAAW;AAChC,MAAA,UAAA,CAAW,MAAM;AACf,QAAA,MAAA,CAAO,IAAI,YAAA;AAAA,UACT,6BAA6B,SAAS,CAAA,EAAA,CAAA;AAAA,UACtC,SAAA;AAAA,UACA;AAAA,YACE,UAAU,OAAA,EAAS,QAAA;AAAA,YACnB,OAAA,EAAS,EAAE,SAAA,EAAW,SAAA,EAAW,SAAS,SAAA;AAAU;AACtD,SACD,CAAA;AAAA,MACH,GAAG,SAAS,CAAA;AAAA,IACd,CAAC;AAAA,GACF,CAAA;AACH;;;ACxhBO,IAAe,eAAf,MAA4B;AAAA,EAMjC,WAAA,CAAY,UAAuB,MAAA,EAAwB;AAL3D,IAAA,aAAA,CAAA,IAAA,EAAmB,UAAA,CAAA;AACnB,IAAA,aAAA,CAAA,IAAA,EAAmB,QAAA,CAAA;AACnB,IAAA,aAAA,CAAA,IAAA,EAAmB,cAAA,CAAA;AACnB,IAAA,aAAA,CAAA,IAAA,EAAmB,gBAAA,CAAA;AAGjB,IAAA,IAAA,CAAK,QAAA,GAAW,QAAA;AAChB,IAAA,IAAA,CAAK,MAAA,GAAS,MAAA;AACd,IAAA,IAAA,CAAK,YAAA,GAAe,IAAI,YAAA,CAAa;AAAA,MACnC,UAAA,EAAY,OAAO,UAAA,IAAc,CAAA;AAAA,MACjC,SAAA,EAAW,OAAO,UAAA,IAAc;AAAA,KACjC,CAAA;AACD,IAAA,IAAA,CAAK,cAAA,GAAiB,IAAI,cAAA,EAAe;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAsBA,eAAe,OAAA,EAAmE;AAChF,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,kCAAA,EAAqC,IAAA,CAAK,QAAQ,CAAA,SAAA,CAAW,CAAA;AAAA,EAC/E;AAAA;AAAA;AAAA;AAAA,EAqCA,MAAgB,gBAAA,CACd,EAAA,EACA,OAAA,EAIY;AACZ,IAAA,MAAM,SAAA,GAAY,OAAA,EAAS,SAAA,IAAa,IAAA,CAAK,iBAAA,EAAkB;AAE/D,IAAA,OAAO,IAAA,CAAK,cAAA,CAAe,OAAA,CAAQ,YAAY;AAC7C,MAAA,OAAO,IAAA,CAAK,YAAA,CAAa,OAAA,CAAQ,EAAA,EAAI;AAAA,QACnC,UAAU,IAAA,CAAK,QAAA;AAAA,QACf,SAAA;AAAA,QACA,WAAW,OAAA,EAAS;AAAA,OACrB,CAAA;AAAA,IACH,CAAC,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAgB,kBAAA,CACd,OAAA,EACA,SAAA,EACY;AACZ,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,MAAA,CAAO,OAAA,IAAW,GAAA;AAEvC,IAAA,OAAO,WAAA,CAAY,SAAS,OAAA,EAAS;AAAA,MACnC,SAAA;AAAA,MACA,UAAU,IAAA,CAAK;AAAA,KAChB,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKU,oBAAA,CACR,SAAA,EACA,KAAA,EACA,SAAA,EACyB;AACzB,IAAA,OAAO;AAAA,MACL,SAAA;AAAA,MACA,UAAU,IAAA,CAAK,QAAA;AAAA,MACf,KAAA;AAAA,MACA,SAAA;AAAA,MACA,OAAA,EAAS,CAAA;AAAA,MACT,MAAA,EAAQ,EAAE,aAAA,EAAe,CAAA,EAAG,mBAAmB,CAAA,EAAG,YAAA,EAAc,CAAA,EAAG,cAAA,EAAgB,CAAA,EAAE;AAAA,MACrF,IAAA,EAAM,CAAA;AAAA,MACN,OAAA,EAAS;AAAA,KACX;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKU,eAAA,CACR,OAAA,EACA,KAAA,EACA,OAAA,EACA,KAAA,EACgB;AAChB,IAAA,OAAO;AAAA,MACL,GAAG,OAAA;AAAA,MACH,OAAA,EAAS,KAAK,GAAA,EAAI;AAAA,MAClB,MAAA,EAAQ,KAAA;AAAA,MACR,MAAM,KAAA,CAAM,cAAA;AAAA,MACZ,OAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKU,iBAAA,GAA4B;AACpC,IAAA,OAAO,GAAG,IAAA,CAAK,QAAQ,CAAA,CAAA,EAAI,IAAA,CAAK,KAAK,CAAA,CAAA,EAAI,IAAA,CAAK,MAAA,GAAS,QAAA,CAAS,EAAE,EAAE,MAAA,CAAO,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA,EAUU,iBAAA,GAA4C;AACpD,IAAA,MAAM,OAAA,GAAkC;AAAA,MACtC,cAAA,EAAgB,kBAAA;AAAA,MAChB,cAAc,IAAA,CAAK,MAAA,CAAO,SAAA,IAAa,CAAA,0BAAA,EAA6B,KAAK,QAAQ,CAAA,CAAA;AAAA,KACnF;AAEA,IAAA,IAAI,IAAA,CAAK,OAAO,MAAA,EAAQ;AACtB,MAAA,OAAA,CAAQ,eAAe,CAAA,GAAI,IAAA,CAAK,aAAA,CAAc,IAAA,CAAK,OAAO,MAAM,CAAA;AAAA,IAClE;AAEA,IAAA,OAAO,OAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,WAAA,GAOH;AACD,IAAA,MAAM,SAAA,GAAY,KAAK,GAAA,EAAI;AAE3B,IAAA,IAAI;AAEF,MAAA,MAAM,IAAA,CAAK,kBAAA;AAAA,QACT,KAAK,cAAA,EAAe;AAAA,QACpB;AAAA,OACF;AAEA,MAAA,OAAO;AAAA,QACL,UAAU,IAAA,CAAK,QAAA;AAAA,QACf,OAAA,EAAS,IAAA;AAAA,QACT,OAAA,EAAS,IAAA,CAAK,GAAA,EAAI,GAAI,SAAA;AAAA,QACtB,YAAA,EAAc,KAAK,eAAA,EAAgB;AAAA,QACnC,oBAAA,EAAsB,IAAA,CAAK,cAAA,CAAe,SAAA;AAAU,OACtD;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,OAAO;AAAA,QACL,UAAU,IAAA,CAAK,QAAA;AAAA,QACf,OAAA,EAAS,KAAA;AAAA,QACT,OAAA,EAAS,IAAA,CAAK,GAAA,EAAI,GAAI,SAAA;AAAA,QACtB,KAAA,EAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,eAAA;AAAA,QAChD,YAAA,EAAc,KAAK,eAAA,EAAgB;AAAA,QACnC,oBAAA,EAAsB,IAAA,CAAK,cAAA,CAAe,SAAA;AAAU,OACtD;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAUA,SAAA,GAA4C;AAC1C,IAAA,MAAM,EAAE,MAAA,EAAQ,GAAG,UAAA,KAAe,IAAA,CAAK,MAAA;AACvC,IAAA,OAAO,UAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAA,EAA6C;AACxD,IAAA,MAAA,CAAO,MAAA,CAAO,IAAA,CAAK,MAAA,EAAQ,OAAO,CAAA;AAAA,EACpC;AACF;AAaO,IAAM,mBAAN,MAAuB;AAAA,EAAvB,WAAA,GAAA;AACL,IAAA,aAAA,CAAA,IAAA,EAAQ,WAAA,sBAAgB,GAAA,EAAkC,CAAA;AAC1D,IAAA,aAAA,CAAA,IAAA,EAAQ,WAAA,sBAAgB,GAAA,EAA0B,CAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAKlD,QAAA,CAAS,UAAuB,OAAA,EAAgC;AAC9D,IAAA,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,QAAA,EAAU,OAAO,CAAA;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,MAAA,EAAsC;AAChD,IAAA,MAAM,MAAM,CAAA,EAAG,MAAA,CAAO,QAAQ,CAAA,CAAA,EAAI,OAAO,KAAK,CAAA,CAAA;AAE9C,IAAA,IAAI,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,GAAG,CAAA,EAAG;AAC3B,MAAA,OAAO,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,GAAG,CAAA;AAAA,IAC/B;AAEA,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,OAAO,QAAQ,CAAA;AAClD,IAAA,IAAI,CAAC,OAAA,EAAS;AACZ,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,oCAAA,EAAuC,MAAA,CAAO,QAAQ,CAAA,CAAE,CAAA;AAAA,IAC1E;AAEA,IAAA,MAAM,QAAA,GAAW,OAAA,CAAQ,MAAA,CAAO,MAAM,CAAA;AACtC,IAAA,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,GAAA,EAAK,QAAQ,CAAA;AAChC,IAAA,OAAO,QAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAA,GAAwC;AACtC,IAAA,OAAO,KAAA,CAAM,IAAA,CAAK,IAAA,CAAK,SAAA,CAAU,MAAM,CAAA;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,QAAA,EAAgC;AACvC,IAAA,OAAO,IAAA,CAAK,SAAA,CAAU,GAAA,CAAI,QAAQ,CAAA;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,UAAA,GAAmB;AACjB,IAAA,IAAA,CAAK,UAAU,KAAA,EAAM;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAA,GAA+C;AACnD,IAAA,MAAM,UAA+B,EAAC;AAEtC,IAAA,KAAA,MAAW,CAAC,QAAA,EAAU,OAAO,CAAA,IAAK,KAAK,SAAA,EAAW;AAChD,MAAA,IAAI;AAEF,QAAA,MAAM,YAAA,GAAe,QAAQ,MAAA,CAAO;AAAA,UAClC,QAAA;AAAA,UACA,KAAA,EAAO,MAAA;AAAA,UACP,MAAA,EAAQ;AAAA,SACT,CAAA;AAED,QAAA,OAAA,CAAQ,QAAQ,CAAA,GAAI,MAAM,YAAA,CAAa,WAAA,EAAY;AAAA,MACrD,SAAS,KAAA,EAAO;AACd,QAAA,OAAA,CAAQ,QAAQ,CAAA,GAAI;AAAA,UAClB,QAAA;AAAA,UACA,OAAA,EAAS,KAAA;AAAA,UACT,KAAA,EAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,SAClD;AAAA,MACF;AAAA,IACF;AAEA,IAAA,OAAO,OAAA;AAAA,EACT;AACF;AAGO,IAAM,gBAAA,GAAmB,IAAI,gBAAA;;;AC/U7B,IAAM,cAAA,GAAN,cAA6B,YAAA,CAAa;AAAA,EAG/C,YAAY,MAAA,EAAuC;AACjD,IAAA,KAAA,CAAM,UAAU,MAAM,CAAA;AAHxB,IAAA,aAAA,CAAA,IAAA,EAAiB,cAAA,CAAA;AAIf,IAAA,IAAA,CAAK,YAAA,GAAe,MAAA;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,eAAA,GAAwC;AACtC,IAAA,OAAO;AAAA,MACL,IAAA,EAAM,IAAA;AAAA,MACN,MAAA,EAAQ,IAAA;AAAA,MACR,UAAA,EAAY,IAAA;AAAA,MACZ,KAAA,EAAO,IAAA;AAAA,MACP,SAAA,EAAW,IAAA;AAAA,MACX,MAAA,EAAQ,IAAA;AAAA,MACR,SAAA,EAAW,KAAA;AAAA,MACX,eAAA,EAAiB,EAAE,KAAA,EAAO,IAAA,EAAM,QAAQ,IAAA;AAAK,KAC/C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,KAAA,EAAwB;AACpC,IAAA,MAAM,WAAA,GAAc,KAAK,kBAAA,EAAmB;AAC5C,IAAA,OAAO,WAAA,CAAY,SAAS,KAAK,CAAA;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAA,GAA+B;AAC7B,IAAA,OAAO;AAAA,MACL,QAAA;AAAA,MACA,aAAA;AAAA,MACA,aAAA;AAAA,MACA,OAAA;AAAA,MACA,eAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAA,EAAwC;AACnD,IAAA,MAAM,KAAA,GAAQ,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAA;AAC3C,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,kBAAA,CAAmB,OAAO,CAAA;AAGlD,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,eAAA,CAAgB,KAAK,CAAA;AAC1C,IAAA,MAAM,SAAA,GAAa,UAAA,CAAW,KAAA,GAAQ,GAAA,GAAQ,OAAA,CAAQ,KAAA;AACtD,IAAA,MAAM,UAAA,GAAc,UAAA,CAAW,MAAA,GAAS,GAAA,GAAQ,OAAA,CAAQ,MAAA;AAExD,IAAA,OAAO,SAAA,GAAY,UAAA;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe,OAAA,EAAiE;AACpF,IAAA,MAAM,SAAA,GAAY,KAAK,iBAAA,EAAkB;AACzC,IAAA,MAAM,SAAA,GAAY,KAAK,GAAA,EAAI;AAC3B,IAAA,MAAM,OAAA,GAAU,KAAK,oBAAA,CAAqB,SAAA,EAAW,QAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAA,EAAO,SAAS,CAAA;AAElG,IAAA,OAAO,IAAA,CAAK,iBAAiB,YAAY;AACvC,MAAA,MAAM,aAAA,GAAgB,IAAA,CAAK,gBAAA,CAAiB,OAAO,CAAA;AAEnD,MAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,kBAAA;AAAA,QAC1B,IAAA,CAAK,iBAAA,CAAkB,mBAAA,EAAqB,aAAa,CAAA;AAAA,QACzD;AAAA,OACF;AAEA,MAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,cAAA,CAAe,QAAA,EAAU,OAAO,CAAA;AACnD,MAAA,MAAM,mBAAA,GAAsB,IAAA,CAAK,iBAAA,CAAkB,QAAA,EAAU,SAAS,OAAO,CAAA;AAG7E,MAAA,IAAA,CAAK,kBAAkB,IAAA,CAAK,eAAA,CAAgB,OAAA,EAAS,KAAA,EAAO,IAAI,CAAC,CAAA;AAEjE,MAAA,OAAO,mBAAA;AAAA,IACT,CAAA,EAAG,EAAE,SAAA,EAAW,SAAA,EAAW,mBAAmB,CAAA;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,qBACL,OAAA,EACoD;AACpD,IAAA,MAAM,SAAA,GAAY,KAAK,iBAAA,EAAkB;AACzC,IAAA,MAAM,aAAA,GAAgB,EAAE,GAAG,IAAA,CAAK,iBAAiB,OAAO,CAAA,EAAG,QAAQ,IAAA,EAAK;AAExE,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,kBAAA;AAAA,MAC1B,IAAA,CAAK,uBAAA,CAAwB,mBAAA,EAAqB,aAAa,CAAA;AAAA,MAC/D;AAAA,KACF;AAEA,IAAA,IAAI,UAAA,GAAoB;AAAA,MACtB,aAAA,EAAe,CAAA;AAAA,MACf,iBAAA,EAAmB,CAAA;AAAA,MACnB,YAAA,EAAc,CAAA;AAAA,MACd,cAAA,EAAgB;AAAA,KAClB;AAEA,IAAA,IAAI;AACF,MAAA,WAAA,MAAiB,SAAS,QAAA,EAAU;AAClC,QAAA,MAAM,gBAAA,GAAmB,IAAA,CAAK,oBAAA,CAAqB,KAAA,EAAO,OAAO,CAAA;AACjE,QAAA,IAAI,gBAAA,EAAkB;AACpB,UAAA,IAAI,iBAAiB,KAAA,EAAO;AAC1B,YAAA,UAAA,GAAa,gBAAA,CAAiB,KAAA;AAAA,UAChC;AACA,UAAA,MAAM,gBAAA;AAAA,QACR;AAAA,MACF;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,YAAA,CAAa,iBAAA,CAAkB,KAAA,EAAO,QAAA,EAAU,SAAS,CAAA;AAAA,IACjE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe,OAAA,EAAmE;AACtF,IAAA,MAAM,SAAA,GAAY,KAAK,iBAAA,EAAkB;AAEzC,IAAA,OAAO,IAAA,CAAK,iBAAiB,YAAY;AACvC,MAAA,MAAM,aAAA,GAAgB,IAAA,CAAK,qBAAA,CAAsB,OAAO,CAAA;AAExD,MAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,kBAAA;AAAA,QAC1B,IAAA,CAAK,iBAAA,CAAkB,qBAAA,EAAuB,aAAa,CAAA;AAAA,QAC3D;AAAA,OACF;AAEA,MAAA,OAAO,IAAA,CAAK,uBAAuB,QAAQ,CAAA;AAAA,IAC7C,CAAA,EAAG,EAAE,SAAA,EAAW,SAAA,EAAW,oBAAoB,CAAA;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAiB,OAAA,EAAqC;AAC5D,IAAA,MAAM,aAAA,GAAqB;AAAA,MACzB,KAAA,EAAO,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAA;AAAA,MACpC,QAAA,EAAU,OAAA,CAAQ,QAAA,CAAS,GAAA,CAAI,CAAA,GAAA,MAAQ;AAAA,QACrC,MAAM,GAAA,CAAI,IAAA;AAAA,QACV,SAAS,GAAA,CAAI,OAAA;AAAA,QACb,GAAI,GAAA,CAAI,IAAA,IAAQ,EAAE,IAAA,EAAM,IAAI,IAAA,EAAK;AAAA,QACjC,GAAI,GAAA,CAAI,UAAA,IAAc,EAAE,UAAA,EAAY,IAAI,UAAA,EAAW;AAAA,QACnD,GAAI,GAAA,CAAI,YAAA,IAAgB,EAAE,YAAA,EAAc,IAAI,YAAA;AAAa,OAC3D,CAAE,CAAA;AAAA,MACF,GAAI,OAAA,CAAQ,WAAA,KAAgB,UAAa,EAAE,WAAA,EAAa,QAAQ,WAAA,EAAY;AAAA,MAC5E,GAAI,OAAA,CAAQ,UAAA,KAAe,UAAa,EAAE,UAAA,EAAY,QAAQ,UAAA,EAAW;AAAA,MACzE,GAAI,OAAA,CAAQ,KAAA,KAAU,UAAa,EAAE,KAAA,EAAO,QAAQ,KAAA,EAAM;AAAA,MAC1D,GAAI,OAAA,CAAQ,iBAAA,KAAsB,UAAa,EAAE,iBAAA,EAAmB,QAAQ,iBAAA,EAAkB;AAAA,MAC9F,GAAI,OAAA,CAAQ,gBAAA,KAAqB,UAAa,EAAE,gBAAA,EAAkB,QAAQ,gBAAA,EAAiB;AAAA,MAC3F,GAAI,OAAA,CAAQ,IAAA,IAAQ,EAAE,IAAA,EAAM,QAAQ,IAAA,EAAK;AAAA,MACzC,GAAI,OAAA,CAAQ,KAAA,IAAS,EAAE,KAAA,EAAO,QAAQ,KAAA,EAAM;AAAA,MAC5C,GAAI,OAAA,CAAQ,WAAA,IAAe,EAAE,WAAA,EAAa,QAAQ,WAAA,EAAY;AAAA,MAC9D,GAAI,OAAA,CAAQ,IAAA,IAAQ,EAAE,IAAA,EAAM,QAAQ,IAAA;AAAK,KAC3C;AAEA,IAAA,OAAO,aAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKU,iBAAA,CACR,QAAA,EACA,OAAA,EACA,OAAA,EACwB;AACxB,IAAA,OAAO;AAAA,MACL,IAAI,QAAA,CAAS,EAAA;AAAA,MACb,MAAA,EAAQ,iBAAA;AAAA,MACR,SAAS,QAAA,CAAS,OAAA;AAAA,MAClB,OAAO,QAAA,CAAS,KAAA;AAAA,MAChB,QAAA,EAAU,QAAA;AAAA,MACV,OAAA,EAAS,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,CAAC,MAAA,MAAiB;AAAA,QAC9C,OAAO,MAAA,CAAO,KAAA;AAAA,QACd,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,OAAO,OAAA,CAAQ,IAAA;AAAA,UACrB,OAAA,EAAS,OAAO,OAAA,CAAQ,OAAA;AAAA,UACxB,GAAI,OAAO,OAAA,CAAQ,UAAA,IAAc,EAAE,UAAA,EAAY,MAAA,CAAO,QAAQ,UAAA;AAAW,SAC3E;AAAA,QACA,eAAe,MAAA,CAAO,aAAA;AAAA,QACtB,GAAI,MAAA,CAAO,QAAA,IAAY,EAAE,QAAA,EAAU,OAAO,QAAA;AAAS,OACrD,CAAE,CAAA;AAAA,MACF,KAAA,EAAO;AAAA,QACL,aAAA,EAAe,SAAS,KAAA,CAAM,aAAA;AAAA,QAC9B,iBAAA,EAAmB,SAAS,KAAA,CAAM,iBAAA;AAAA,QAClC,YAAA,EAAc,SAAS,KAAA,CAAM,YAAA;AAAA,QAC7B,cAAA,EAAgB,KAAK,aAAA,CAAc,QAAA,CAAS,OAAO,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAK;AAAA,OACvF;AAAA,MACA,GAAI,QAAA,CAAS,kBAAA,IAAsB,EAAE,kBAAA,EAAoB,SAAS,kBAAA;AAAmB,KACvF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKU,oBAAA,CACR,OACA,OAAA,EAC4B;AAC5B,IAAA,IAAI,CAAC,KAAA,IAAS,KAAA,KAAU,QAAA,EAAU;AAChC,MAAA,OAAO,IAAA;AAAA,IACT;AAGA,IAAA,IAAI,IAAA;AACJ,IAAA,IAAI;AACF,MAAA,IAAA,GAAO,OAAO,KAAA,KAAU,QAAA,GAAW,IAAA,CAAK,KAAA,CAAM,KAAK,CAAA,GAAI,KAAA;AAAA,IACzD,CAAA,CAAA,MAAQ;AACN,MAAA,OAAO,IAAA;AAAA,IACT;AAEA,IAAA,OAAO;AAAA,MACL,IAAI,IAAA,CAAK,EAAA;AAAA,MACT,MAAA,EAAQ,uBAAA;AAAA,MACR,SAAS,IAAA,CAAK,OAAA;AAAA,MACd,OAAO,IAAA,CAAK,KAAA;AAAA,MACZ,QAAA,EAAU,QAAA;AAAA,MACV,OAAA,EAAS,IAAA,CAAK,OAAA,CAAQ,GAAA,CAAI,CAAC,MAAA,MAAiB;AAAA,QAC1C,OAAO,MAAA,CAAO,KAAA;AAAA,QACd,KAAA,EAAO;AAAA,UACL,GAAI,OAAO,KAAA,CAAM,IAAA,IAAQ,EAAE,IAAA,EAAM,MAAA,CAAO,MAAM,IAAA,EAAK;AAAA,UACnD,GAAI,OAAO,KAAA,CAAM,OAAA,IAAW,EAAE,OAAA,EAAS,MAAA,CAAO,MAAM,OAAA,EAAQ;AAAA,UAC5D,GAAI,OAAO,KAAA,CAAM,UAAA,IAAc,EAAE,UAAA,EAAY,MAAA,CAAO,MAAM,UAAA;AAAW,SACvE;AAAA,QACA,eAAe,MAAA,CAAO;AAAA,OACxB,CAAE,CAAA;AAAA,MACF,GAAI,KAAK,KAAA,IAAS;AAAA,QAChB,KAAA,EAAO;AAAA,UACL,aAAA,EAAe,KAAK,KAAA,CAAM,aAAA;AAAA,UAC1B,iBAAA,EAAmB,KAAK,KAAA,CAAM,iBAAA;AAAA,UAC9B,YAAA,EAAc,KAAK,KAAA,CAAM,YAAA;AAAA,UACzB,cAAA,EAAgB,KAAK,aAAA,CAAc,IAAA,CAAK,OAAO,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAK;AAAA;AACnF;AACF,KACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,sBAAsB,OAAA,EAAsC;AAClE,IAAA,OAAO;AAAA,MACL,QAAQ,OAAA,CAAQ,MAAA;AAAA,MAChB,KAAA,EAAO,QAAQ,KAAA,IAAS,UAAA;AAAA,MACxB,CAAA,EAAG,QAAQ,CAAA,IAAK,CAAA;AAAA,MAChB,IAAA,EAAM,QAAQ,IAAA,IAAQ,WAAA;AAAA,MACtB,OAAA,EAAS,QAAQ,OAAA,IAAW,UAAA;AAAA,MAC5B,KAAA,EAAO,QAAQ,KAAA,IAAS,OAAA;AAAA,MACxB,eAAA,EAAiB,QAAQ,eAAA,IAAmB,KAAA;AAAA,MAC5C,GAAI,OAAA,CAAQ,IAAA,IAAQ,EAAE,IAAA,EAAM,QAAQ,IAAA;AAAK,KAC3C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,uBAAuB,QAAA,EAAwC;AACrE,IAAA,OAAO;AAAA,MACL,SAAS,QAAA,CAAS,OAAA;AAAA,MAClB,IAAA,EAAM,QAAA,CAAS,IAAA,CAAK,GAAA,CAAI,CAAC,IAAA,MAAe;AAAA,QACtC,KAAK,IAAA,CAAK,GAAA;AAAA,QACV,UAAU,IAAA,CAAK,QAAA;AAAA,QACf,gBAAgB,IAAA,CAAK;AAAA,OACvB,CAAE,CAAA;AAAA,MACF,QAAA,EAAU,QAAA;AAAA,MACV,KAAA,EAAO;AAAA,QACL,cAAA,EAAgB,IAAA,CAAK,kBAAA,CAAmB,QAAA,CAAS,KAAK,MAAM;AAAA;AAC9D,KACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,iBAAA,CAAkB,QAAA,EAAkB,IAAA,EAAyB;AACzE,IAAA,MAAM,MAAM,CAAA,EAAG,IAAA,CAAK,OAAO,OAAA,IAAW,2BAA2B,GAAG,QAAQ,CAAA,CAAA;AAC5E,IAAA,MAAM,OAAA,GAAU,KAAK,iBAAA,EAAkB;AAGvC,IAAA,IAAI,IAAA,CAAK,aAAa,YAAA,EAAc;AAClC,MAAA,OAAA,CAAQ,qBAAqB,CAAA,GAAI,IAAA,CAAK,YAAA,CAAa,YAAA;AAAA,IACrD;AACA,IAAA,IAAI,IAAA,CAAK,aAAa,OAAA,EAAS;AAC7B,MAAA,OAAA,CAAQ,gBAAgB,CAAA,GAAI,IAAA,CAAK,YAAA,CAAa,OAAA;AAAA,IAChD;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,GAAA,EAAK;AAAA,QAChC,MAAA,EAAQ,MAAA;AAAA,QACR,OAAA;AAAA,QACA,IAAA,EAAM,IAAA,CAAK,SAAA,CAAU,IAAI;AAAA,OAC1B,CAAA;AAED,MAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,QAAA,MAAM,KAAA,GAAQ,MAAM,QAAA,CAAS,IAAA,EAAK,CAAE,KAAA,CAAM,OAAO,EAAE,OAAA,EAAS,QAAA,CAAS,UAAA,EAAW,CAAE,CAAA;AAClF,QAAA,MAAM,YAAA,CAAa,kBAAkB,EAAE,GAAG,OAAO,MAAA,EAAQ,QAAA,CAAS,MAAA,EAAO,EAAG,QAAQ,CAAA;AAAA,MACtF;AAEA,MAAA,OAAO,MAAM,SAAS,IAAA,EAAK;AAAA,IAC7B,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,YAAA,CAAa,iBAAA,CAAkB,KAAA,EAAO,QAAQ,CAAA;AAAA,IACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,uBAAA,CAAwB,QAAA,EAAkB,IAAA,EAAyC;AAC/F,IAAA,MAAM,MAAM,CAAA,EAAG,IAAA,CAAK,OAAO,OAAA,IAAW,2BAA2B,GAAG,QAAQ,CAAA,CAAA;AAC5E,IAAA,MAAM,UAAU,EAAE,GAAG,KAAK,iBAAA,EAAkB,EAAG,UAAU,mBAAA,EAAoB;AAG7E,IAAA,IAAI,IAAA,CAAK,aAAa,YAAA,EAAc;AAClC,MAAA,OAAA,CAAQ,qBAAqB,CAAA,GAAI,IAAA,CAAK,YAAA,CAAa,YAAA;AAAA,IACrD;AACA,IAAA,IAAI,IAAA,CAAK,aAAa,OAAA,EAAS;AAC7B,MAAA,OAAA,CAAQ,gBAAgB,CAAA,GAAI,IAAA,CAAK,YAAA,CAAa,OAAA;AAAA,IAChD;AAEA,IAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,GAAA,EAAK;AAAA,MAChC,MAAA,EAAQ,MAAA;AAAA,MACR,OAAA;AAAA,MACA,IAAA,EAAM,IAAA,CAAK,SAAA,CAAU,IAAI;AAAA,KAC1B,CAAA;AAED,IAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,MAAA,MAAM,KAAA,GAAQ,MAAM,QAAA,CAAS,IAAA,EAAK,CAAE,KAAA,CAAM,OAAO,EAAE,OAAA,EAAS,QAAA,CAAS,UAAA,EAAW,CAAE,CAAA;AAClF,MAAA,MAAM,YAAA,CAAa,kBAAkB,EAAE,GAAG,OAAO,MAAA,EAAQ,QAAA,CAAS,MAAA,EAAO,EAAG,QAAQ,CAAA;AAAA,IACtF;AAEA,IAAA,OAAO,IAAA,CAAK,eAAe,QAAQ,CAAA;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,eAAe,QAAA,EAAyC;AACrE,IAAA,MAAM,MAAA,GAAS,QAAA,CAAS,IAAA,EAAM,SAAA,EAAU;AACxC,IAAA,IAAI,CAAC,MAAA,EAAQ,MAAM,IAAI,MAAM,kBAAkB,CAAA;AAE/C,IAAA,MAAM,OAAA,GAAU,IAAI,WAAA,EAAY;AAChC,IAAA,IAAI,MAAA,GAAS,EAAA;AAEb,IAAA,IAAI;AACF,MAAA,OAAO,IAAA,EAAM;AACX,QAAA,MAAM,EAAE,IAAA,EAAM,KAAA,EAAM,GAAI,MAAM,OAAO,IAAA,EAAK;AAC1C,QAAA,IAAI,IAAA,EAAM;AAEV,QAAA,MAAA,IAAU,QAAQ,MAAA,CAAO,KAAA,EAAO,EAAE,MAAA,EAAQ,MAAM,CAAA;AAChD,QAAA,MAAM,KAAA,GAAQ,MAAA,CAAO,KAAA,CAAM,IAAI,CAAA;AAC/B,QAAA,MAAA,GAAS,KAAA,CAAM,KAAI,IAAK,EAAA;AAExB,QAAA,KAAA,MAAW,QAAQ,KAAA,EAAO;AACxB,UAAA,IAAI,IAAA,CAAK,UAAA,CAAW,QAAQ,CAAA,EAAG;AAC7B,YAAA,MAAM,IAAA,GAAO,IAAA,CAAK,KAAA,CAAM,CAAC,CAAA;AACzB,YAAA,IAAI,SAAS,QAAA,EAAU;AAEvB,YAAA,IAAI;AACF,cAAA,MAAM,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA,YACvB,CAAA,CAAA,MAAQ;AAAA,YAER;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAA,SAAE;AACA,MAAA,MAAA,CAAO,WAAA,EAAY;AAAA,IACrB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKU,eAAe,MAAA,EAAyB;AAChD,IAAA,OAAO,sBAAA,CAAuB,KAAK,MAAM,CAAA;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA,EAKU,cAAc,MAAA,EAAwB;AAC9C,IAAA,OAAO,UAAU,MAAM,CAAA,CAAA;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAgB,cAAA,GAAgC;AAC9C,IAAA,MAAM,KAAK,iBAAA,CAAkB,SAAA,EAAW,EAAE,CAAA,CAAE,MAAM,MAAM;AAAA,IAExD,CAAC,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKQ,cAAA,CAAe,UAAe,OAAA,EAAuC;AAC3E,IAAA,MAAM,QAAQ,QAAA,CAAS,KAAA;AACvB,IAAA,MAAM,IAAA,GAAO,KAAK,aAAA,CAAc,KAAA,EAAO,QAAQ,KAAA,IAAS,IAAA,CAAK,OAAO,KAAK,CAAA;AAEzE,IAAA,OAAO;AAAA,MACL,eAAe,KAAA,CAAM,aAAA;AAAA,MACrB,mBAAmB,KAAA,CAAM,iBAAA;AAAA,MACzB,cAAc,KAAA,CAAM,YAAA;AAAA,MACpB,cAAA,EAAgB;AAAA,KAClB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,aAAA,CAAc,OAAY,KAAA,EAAuB;AACvD,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,eAAA,CAAgB,KAAK,CAAA;AAC1C,IAAA,MAAM,SAAA,GAAa,KAAA,CAAM,aAAA,GAAgB,GAAA,GAAQ,OAAA,CAAQ,KAAA;AACzD,IAAA,MAAM,UAAA,GAAc,KAAA,CAAM,iBAAA,GAAoB,GAAA,GAAQ,OAAA,CAAQ,MAAA;AAC9D,IAAA,OAAO,SAAA,GAAY,UAAA;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKQ,gBAAgB,KAAA,EAAkD;AACxE,IAAA,MAAM,UAAA,GAAgE;AAAA,MACpE,QAAA,EAAU,EAAE,KAAA,EAAO,IAAA,EAAO,QAAQ,KAAA,EAAM;AAAA,MACxC,aAAA,EAAe,EAAE,KAAA,EAAO,KAAA,EAAS,QAAQ,IAAA,EAAO;AAAA,MAChD,aAAA,EAAe,EAAE,KAAA,EAAO,IAAA,EAAM,QAAQ,IAAA,EAAK;AAAA,MAC3C,OAAA,EAAS,EAAE,KAAA,EAAO,IAAA,EAAM,QAAQ,IAAA,EAAK;AAAA,MACrC,eAAA,EAAiB,EAAE,KAAA,EAAO,KAAA,EAAQ,QAAQ,IAAA,EAAM;AAAA,MAChD,mBAAA,EAAqB,EAAE,KAAA,EAAO,IAAA,EAAO,QAAQ,IAAA;AAAM,KACrD;AAEA,IAAA,OAAO,WAAW,KAAK,CAAA,IAAK,EAAE,KAAA,EAAO,IAAA,EAAM,QAAQ,IAAA,EAAK;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA,EAKQ,mBAAmB,UAAA,EAA4B;AACrD,IAAA,OAAO,UAAA,GAAa,IAAA;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKQ,mBAAmB,OAAA,EAAmE;AAE5F,IAAA,MAAM,cAAc,OAAA,CAAQ,QAAA,CACzB,IAAI,CAAA,CAAA,KAAK,OAAO,EAAE,OAAA,KAAY,QAAA,GAAW,CAAA,CAAE,OAAA,GAAU,KAAK,SAAA,CAAU,CAAA,CAAE,OAAO,CAAC,CAAA,CAC9E,KAAK,GAAG,CAAA;AAEX,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,IAAA,CAAK,WAAA,CAAY,SAAS,CAAC,CAAA;AACpD,IAAA,MAAM,YAAA,GAAe,QAAQ,UAAA,IAAc,GAAA;AAE3C,IAAA,OAAO,EAAE,KAAA,EAAO,WAAA,EAAa,MAAA,EAAQ,YAAA,EAAa;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA,EAKQ,kBAAkB,OAAA,EAA+B;AACvD,IAAA,IAAI,IAAA,CAAK,OAAO,KAAA,EAAO;AACrB,MAAA,OAAA,CAAQ,IAAI,yBAAA,EAA2B;AAAA,QACrC,WAAW,OAAA,CAAQ,SAAA;AAAA,QACnB,UAAU,OAAA,CAAQ,QAAA;AAAA,QAClB,OAAO,OAAA,CAAQ,KAAA;AAAA,QACf,QAAA,EAAU,OAAA,CAAQ,OAAA,GAAU,OAAA,CAAQ,SAAA;AAAA,QACpC,QAAQ,OAAA,CAAQ,MAAA;AAAA,QAChB,MAAM,OAAA,CAAQ,IAAA;AAAA,QACd,SAAS,OAAA,CAAQ;AAAA,OAClB,CAAA;AAAA,IACH;AAAA,EACF;AACF;AAKO,IAAM,wBAAN,MAAuD;AAAA,EAC5D,OAAO,MAAA,EAAwC;AAC7C,IAAA,OAAO,IAAI,eAAe,MAAuC,CAAA;AAAA,EACnE;AAAA,EAEA,SAAS,QAAA,EAAgC;AACvC,IAAA,OAAO,QAAA,KAAa,QAAA;AAAA,EACtB;AACF;AAKO,SAAS,MAAA,CAAO,OAAA,GAAwB,EAAC,EAAkC;AAChF,EAAA,OAAO;AAAA,IACL,QAAA,EAAU,QAAA;AAAA,IACV,KAAA,EAAO,QAAQ,KAAA,IAAS,QAAA;AAAA,IACxB,GAAG;AAAA,GACL;AACF;;;AC5fO,IAAM,cAAA,GAAN,cAA6B,YAAA,CAAa;AAAA,EAG/C,YAAY,MAAA,EAAuC;AACjD,IAAA,KAAA,CAAM,UAAU,MAAM,CAAA;AAHxB,IAAA,aAAA,CAAA,IAAA,EAAiB,cAAA,CAAA;AAIf,IAAA,IAAA,CAAK,YAAA,GAAe,MAAA;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,eAAA,GAAwC;AACtC,IAAA,OAAO;AAAA,MACL,IAAA,EAAM,IAAA;AAAA,MACN,MAAA,EAAQ,KAAA;AAAA,MACR,UAAA,EAAY,KAAA;AAAA,MACZ,KAAA,EAAO,IAAA;AAAA,MACP,SAAA,EAAW,IAAA;AAAA,MACX,MAAA,EAAQ,IAAA;AAAA,MACR,SAAA,EAAW,GAAA;AAAA,MACX,eAAA,EAAiB,EAAE,KAAA,EAAO,IAAA,EAAO,QAAQ,KAAA;AAAM,KACjD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,KAAA,EAAwB;AACpC,IAAA,MAAM,WAAA,GAAc,KAAK,kBAAA,EAAmB;AAC5C,IAAA,OAAO,WAAA,CAAY,SAAS,KAAK,CAAA;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAA,GAA+B;AAC7B,IAAA,OAAO;AAAA,MACL,4BAAA;AAAA,MACA,2BAAA;AAAA,MACA,wBAAA;AAAA,MACA,0BAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,OAAA,EAAwC;AACnD,IAAA,MAAM,KAAA,GAAQ,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAA;AAC3C,IAAA,MAAM,UAAA,GAAa,IAAA,CAAK,kBAAA,CAAmB,OAAO,CAAA;AAGlD,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,eAAA,CAAgB,KAAK,CAAA;AAC1C,IAAA,MAAM,SAAA,GAAa,UAAA,CAAW,KAAA,GAAQ,GAAA,GAAQ,OAAA,CAAQ,KAAA;AACtD,IAAA,MAAM,UAAA,GAAc,UAAA,CAAW,MAAA,GAAS,GAAA,GAAQ,OAAA,CAAQ,MAAA;AAExD,IAAA,OAAO,SAAA,GAAY,UAAA;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,eAAe,OAAA,EAAiE;AACpF,IAAA,MAAM,SAAA,GAAY,KAAK,iBAAA,EAAkB;AACzC,IAAA,MAAM,SAAA,GAAY,KAAK,GAAA,EAAI;AAC3B,IAAA,MAAM,OAAA,GAAU,KAAK,oBAAA,CAAqB,SAAA,EAAW,QAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAA,EAAO,SAAS,CAAA;AAElG,IAAA,OAAO,IAAA,CAAK,iBAAiB,YAAY;AACvC,MAAA,MAAM,aAAA,GAAgB,IAAA,CAAK,gBAAA,CAAiB,OAAO,CAAA;AAEnD,MAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,kBAAA;AAAA,QAC1B,IAAA,CAAK,iBAAA,CAAkB,WAAA,EAAa,aAAa,CAAA;AAAA,QACjD;AAAA,OACF;AAEA,MAAA,MAAM,KAAA,GAAQ,IAAA,CAAK,cAAA,CAAe,QAAA,EAAU,OAAO,CAAA;AACnD,MAAA,MAAM,mBAAA,GAAsB,IAAA,CAAK,iBAAA,CAAkB,QAAA,EAAU,SAAS,OAAO,CAAA;AAG7E,MAAA,IAAA,CAAK,kBAAkB,IAAA,CAAK,eAAA,CAAgB,OAAA,EAAS,KAAA,EAAO,IAAI,CAAC,CAAA;AAEjE,MAAA,OAAO,mBAAA;AAAA,IACT,CAAA,EAAG,EAAE,SAAA,EAAW,SAAA,EAAW,mBAAmB,CAAA;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,qBACL,OAAA,EACoD;AACpD,IAAA,MAAM,SAAA,GAAY,KAAK,iBAAA,EAAkB;AACzC,IAAA,MAAM,aAAA,GAAgB,EAAE,GAAG,IAAA,CAAK,iBAAiB,OAAO,CAAA,EAAG,QAAQ,IAAA,EAAK;AAExE,IAAA,MAAM,QAAA,GAAW,MAAM,IAAA,CAAK,kBAAA;AAAA,MAC1B,IAAA,CAAK,uBAAA,CAAwB,WAAA,EAAa,aAAa,CAAA;AAAA,MACvD;AAAA,KACF;AAEA,IAAA,IAAI,UAAA,GAAoB;AAAA,MACtB,aAAA,EAAe,CAAA;AAAA,MACf,iBAAA,EAAmB,CAAA;AAAA,MACnB,YAAA,EAAc,CAAA;AAAA,MACd,cAAA,EAAgB;AAAA,KAClB;AAEA,IAAA,IAAI;AACF,MAAA,WAAA,MAAiB,SAAS,QAAA,EAAU;AAClC,QAAA,MAAM,gBAAA,GAAmB,IAAA,CAAK,oBAAA,CAAqB,KAAA,EAAO,OAAO,CAAA;AACjE,QAAA,IAAI,gBAAA,EAAkB;AACpB,UAAA,IAAI,iBAAiB,KAAA,EAAO;AAC1B,YAAA,UAAA,GAAa,gBAAA,CAAiB,KAAA;AAAA,UAChC;AACA,UAAA,MAAM,gBAAA;AAAA,QACR;AAAA,MACF;AAAA,IACF,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,YAAA,CAAa,iBAAA,CAAkB,KAAA,EAAO,QAAA,EAAU,SAAS,CAAA;AAAA,IACjE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,iBAAiB,OAAA,EAAqC;AAE5D,IAAA,MAAM,gBAAgB,OAAA,CAAQ,QAAA,CAAS,KAAK,CAAA,CAAA,KAAK,CAAA,CAAE,SAAS,QAAQ,CAAA;AACpE,IAAA,MAAM,WAAW,OAAA,CAAQ,QAAA,CAAS,OAAO,CAAA,CAAA,KAAK,CAAA,CAAE,SAAS,QAAQ,CAAA;AAGjE,IAAA,MAAM,cAAA,GAAiB,QAAA,CAAS,GAAA,CAAI,CAAA,GAAA,MAAQ;AAAA,MAC1C,IAAA,EAAM,GAAA,CAAI,IAAA,KAAS,WAAA,GAAc,WAAA,GAAc,MAAA;AAAA,MAC/C,OAAA,EAAS,IAAA,CAAK,uBAAA,CAAwB,GAAG;AAAA,KAC3C,CAAE,CAAA;AAEF,IAAA,MAAM,aAAA,GAAqB;AAAA,MACzB,KAAA,EAAO,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAA;AAAA,MACpC,QAAA,EAAU,cAAA;AAAA,MACV,UAAA,EAAY,QAAQ,UAAA,IAAc,GAAA;AAAA,MAClC,GAAI,aAAA,IAAiB,EAAE,MAAA,EAAQ,cAAc,OAAA,EAAQ;AAAA,MACrD,GAAI,OAAA,CAAQ,WAAA,KAAgB,UAAa,EAAE,WAAA,EAAa,QAAQ,WAAA,EAAY;AAAA,MAC5E,GAAI,OAAA,CAAQ,KAAA,KAAU,UAAa,EAAE,KAAA,EAAO,QAAQ,KAAA,EAAM;AAAA,MAC1D,GAAI,OAAA,CAAQ,IAAA,IAAQ,EAAE,gBAAgB,KAAA,CAAM,OAAA,CAAQ,OAAA,CAAQ,IAAI,IAAI,OAAA,CAAQ,IAAA,GAAO,CAAC,OAAA,CAAQ,IAAI,CAAA,EAAE;AAAA,MAClG,GAAI,QAAQ,KAAA,IAAS,EAAE,OAAO,IAAA,CAAK,cAAA,CAAe,OAAA,CAAQ,KAAK,CAAA;AAAE,KACnE;AAEA,IAAA,OAAO,aAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,wBAAwB,OAAA,EAAuB;AACrD,IAAA,IAAI,OAAO,OAAA,CAAQ,OAAA,KAAY,QAAA,EAAU;AACvC,MAAA,OAAO,OAAA,CAAQ,OAAA;AAAA,IACjB;AAGA,IAAA,OAAO,OAAA,CAAQ,OAAA,CAAQ,GAAA,CAAI,CAAA,OAAA,KAAW;AACpC,MAAA,IAAI,OAAA,CAAQ,SAAS,MAAA,EAAQ;AAC3B,QAAA,OAAO;AAAA,UACL,IAAA,EAAM,MAAA;AAAA,UACN,MAAM,OAAA,CAAQ;AAAA,SAChB;AAAA,MACF,CAAA,MAAA,IAAW,OAAA,CAAQ,IAAA,KAAS,WAAA,EAAa;AACvC,QAAA,OAAO;AAAA,UACL,IAAA,EAAM,OAAA;AAAA,UACN,MAAA,EAAQ;AAAA,YACN,IAAA,EAAM,QAAA;AAAA,YACN,UAAA,EAAY,YAAA;AAAA;AAAA,YACZ,IAAA,EAAM,QAAQ,SAAA,EAAW,GAAA,CAAI,MAAM,GAAG,CAAA,CAAE,CAAC,CAAA,IAAK;AAAA;AAAA;AAChD,SACF;AAAA,MACF;AACA,MAAA,OAAO,OAAA;AAAA,IACT,CAAC,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKQ,eAAe,KAAA,EAAqB;AAC1C,IAAA,OAAO,KAAA,CAAM,IAAI,CAAA,IAAA,MAAS;AAAA,MACxB,IAAA,EAAM,KAAK,QAAA,CAAS,IAAA;AAAA,MACpB,WAAA,EAAa,KAAK,QAAA,CAAS,WAAA;AAAA,MAC3B,YAAA,EAAc,KAAK,QAAA,CAAS;AAAA,KAC9B,CAAE,CAAA;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKU,iBAAA,CACR,QAAA,EACA,OAAA,EACA,OAAA,EACwB;AAExB,IAAA,MAAM,KAAA,GAAe;AAAA,MACnB,aAAA,EAAe,QAAA,CAAS,KAAA,EAAO,YAAA,IAAgB,CAAA;AAAA,MAC/C,iBAAA,EAAmB,QAAA,CAAS,KAAA,EAAO,aAAA,IAAiB,CAAA;AAAA,MACpD,eAAe,QAAA,CAAS,KAAA,EAAO,gBAAgB,CAAA,KAAM,QAAA,CAAS,OAAO,aAAA,IAAiB,CAAA,CAAA;AAAA,MACtF,cAAA,EAAgB,KAAK,aAAA,CAAc,QAAA,CAAS,OAAO,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAK;AAAA,KACvF;AAEA,IAAA,OAAO;AAAA,MACL,IAAI,QAAA,CAAS,EAAA;AAAA,MACb,MAAA,EAAQ,iBAAA;AAAA,MACR,SAAS,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,GAAA,KAAQ,GAAI,CAAA;AAAA,MACrC,OAAO,QAAA,CAAS,KAAA;AAAA,MAChB,QAAA,EAAU,QAAA;AAAA,MACV,SAAS,CAAC;AAAA,QACR,KAAA,EAAO,CAAA;AAAA,QACP,OAAA,EAAS;AAAA,UACP,IAAA,EAAM,WAAA;AAAA,UACN,OAAA,EAAS,IAAA,CAAK,0BAAA,CAA2B,QAAQ,CAAA;AAAA,UACjD,GAAI,SAAS,UAAA,IAAc,EAAE,YAAY,IAAA,CAAK,4BAAA,CAA6B,QAAA,CAAS,UAAU,CAAA;AAAE,SAClG;AAAA,QACA,aAAA,EAAe,IAAA,CAAK,aAAA,CAAc,QAAA,CAAS,WAAW;AAAA,OACvD,CAAA;AAAA,MACD;AAAA,KACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,2BAA2B,QAAA,EAAuB;AACxD,IAAA,IAAI,SAAS,OAAA,IAAW,KAAA,CAAM,OAAA,CAAQ,QAAA,CAAS,OAAO,CAAA,EAAG;AACvD,MAAA,OAAO,SAAS,OAAA,CACb,MAAA,CAAO,CAAC,IAAA,KAAc,KAAK,IAAA,KAAS,MAAM,CAAA,CAC1C,GAAA,CAAI,CAAC,IAAA,KAAc,IAAA,CAAK,IAAI,CAAA,CAC5B,KAAK,EAAE,CAAA;AAAA,IACZ;AACA,IAAA,OAAO,SAAS,OAAA,IAAW,EAAA;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKQ,6BAA6B,SAAA,EAAyB;AAC5D,IAAA,OAAO,SAAA,CAAU,GAAA,CAAI,CAAC,IAAA,EAAM,KAAA,MAAW;AAAA,MACrC,EAAA,EAAI,QAAQ,KAAK,CAAA,CAAA;AAAA,MACjB,IAAA,EAAM,UAAA;AAAA,MACN,QAAA,EAAU;AAAA,QACR,MAAM,IAAA,CAAK,IAAA;AAAA,QACX,SAAA,EAAW,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,KAAK;AAAA;AACtC,KACF,CAAE,CAAA;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKQ,cAAc,UAAA,EAA4B;AAChD,IAAA,MAAM,SAAA,GAAoC;AAAA,MACxC,UAAA,EAAY,MAAA;AAAA,MACZ,YAAA,EAAc,QAAA;AAAA,MACd,eAAA,EAAiB,MAAA;AAAA,MACjB,UAAA,EAAY;AAAA,KACd;AACA,IAAA,OAAO,SAAA,CAAU,UAAU,CAAA,IAAK,MAAA;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKU,oBAAA,CACR,OACA,OAAA,EAC4B;AAC5B,IAAA,IAAI,CAAC,KAAA,IAAS,CAAC,KAAA,CAAM,IAAA,EAAM;AACzB,MAAA,OAAO,IAAA;AAAA,IACT;AAGA,IAAA,IAAI,KAAA,CAAM,SAAS,eAAA,EAAiB;AAClC,MAAA,OAAO;AAAA,QACL,EAAA,EAAI,MAAM,OAAA,CAAQ,EAAA;AAAA,QAClB,MAAA,EAAQ,uBAAA;AAAA,QACR,SAAS,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,GAAA,KAAQ,GAAI,CAAA;AAAA,QACrC,KAAA,EAAO,MAAM,OAAA,CAAQ,KAAA;AAAA,QACrB,QAAA,EAAU,QAAA;AAAA,QACV,SAAS,CAAC;AAAA,UACR,KAAA,EAAO,CAAA;AAAA,UACP,KAAA,EAAO,EAAE,IAAA,EAAM,WAAA,EAAY;AAAA,UAC3B,aAAA,EAAe;AAAA,SAChB;AAAA,OACH;AAAA,IACF;AAEA,IAAA,IAAI,KAAA,CAAM,SAAS,qBAAA,EAAuB;AACxC,MAAA,OAAO;AAAA,QACL,EAAA,EAAI,KAAA,CAAM,OAAA,EAAS,EAAA,IAAM,SAAA;AAAA,QACzB,MAAA,EAAQ,uBAAA;AAAA,QACR,SAAS,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,GAAA,KAAQ,GAAI,CAAA;AAAA,QACrC,KAAA,EAAO,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAA;AAAA,QACpC,QAAA,EAAU,QAAA;AAAA,QACV,SAAS,CAAC;AAAA,UACR,KAAA,EAAO,CAAA;AAAA,UACP,KAAA,EAAO,EAAE,OAAA,EAAS,KAAA,CAAM,MAAM,IAAA,EAAK;AAAA,UACnC,aAAA,EAAe;AAAA,SAChB;AAAA,OACH;AAAA,IACF;AAEA,IAAA,IAAI,KAAA,CAAM,SAAS,eAAA,EAAiB;AAClC,MAAA,MAAM,KAAA,GAAQ,MAAM,KAAA,GAAQ;AAAA,QAC1B,aAAA,EAAe,KAAA,CAAM,KAAA,CAAM,YAAA,IAAgB,CAAA;AAAA,QAC3C,iBAAA,EAAmB,KAAA,CAAM,KAAA,CAAM,aAAA,IAAiB,CAAA;AAAA,QAChD,eAAe,KAAA,CAAM,KAAA,CAAM,gBAAgB,CAAA,KAAM,KAAA,CAAM,MAAM,aAAA,IAAiB,CAAA,CAAA;AAAA,QAC9E,cAAA,EAAgB,KAAK,aAAA,CAAc,KAAA,CAAM,OAAO,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAK;AAAA,OACpF,GAAI,MAAA;AAEJ,MAAA,OAAO;AAAA,QACL,EAAA,EAAI,KAAA,CAAM,OAAA,EAAS,EAAA,IAAM,SAAA;AAAA,QACzB,MAAA,EAAQ,uBAAA;AAAA,QACR,SAAS,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,GAAA,KAAQ,GAAI,CAAA;AAAA,QACrC,KAAA,EAAO,OAAA,CAAQ,KAAA,IAAS,IAAA,CAAK,MAAA,CAAO,KAAA;AAAA,QACpC,QAAA,EAAU,QAAA;AAAA,QACV,SAAS,CAAC;AAAA,UACR,KAAA,EAAO,CAAA;AAAA,UACP,OAAO,EAAC;AAAA,UACR,eAAe,IAAA,CAAK,aAAA,CAAc,KAAA,CAAM,KAAA,CAAM,eAAe,UAAU;AAAA,SACxE,CAAA;AAAA,QACD,GAAI,KAAA,IAAS,EAAE,KAAA;AAAM,OACvB;AAAA,IACF;AAEA,IAAA,OAAO,IAAA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,iBAAA,CAAkB,QAAA,EAAkB,IAAA,EAAyB;AACzE,IAAA,MAAM,MAAM,CAAA,EAAG,IAAA,CAAK,OAAO,OAAA,IAAW,8BAA8B,GAAG,QAAQ,CAAA,CAAA;AAC/E,IAAA,MAAM,OAAA,GAAU,KAAK,iBAAA,EAAkB;AAGvC,IAAA,OAAA,CAAQ,mBAAmB,CAAA,GAAI,IAAA,CAAK,YAAA,CAAa,gBAAA,IAAoB,YAAA;AAErE,IAAA,IAAI;AACF,MAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,GAAA,EAAK;AAAA,QAChC,MAAA,EAAQ,MAAA;AAAA,QACR,OAAA;AAAA,QACA,IAAA,EAAM,IAAA,CAAK,SAAA,CAAU,IAAI;AAAA,OAC1B,CAAA;AAED,MAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,QAAA,MAAM,KAAA,GAAQ,MAAM,QAAA,CAAS,IAAA,EAAK,CAAE,KAAA,CAAM,OAAO,EAAE,OAAA,EAAS,QAAA,CAAS,UAAA,EAAW,CAAE,CAAA;AAClF,QAAA,MAAM,YAAA,CAAa,kBAAkB,EAAE,GAAG,OAAO,MAAA,EAAQ,QAAA,CAAS,MAAA,EAAO,EAAG,QAAQ,CAAA;AAAA,MACtF;AAEA,MAAA,OAAO,MAAM,SAAS,IAAA,EAAK;AAAA,IAC7B,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,YAAA,CAAa,iBAAA,CAAkB,KAAA,EAAO,QAAQ,CAAA;AAAA,IACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,uBAAA,CAAwB,QAAA,EAAkB,IAAA,EAAyC;AAC/F,IAAA,MAAM,MAAM,CAAA,EAAG,IAAA,CAAK,OAAO,OAAA,IAAW,8BAA8B,GAAG,QAAQ,CAAA,CAAA;AAC/E,IAAA,MAAM,UAAU,EAAE,GAAG,KAAK,iBAAA,EAAkB,EAAG,UAAU,mBAAA,EAAoB;AAG7E,IAAA,OAAA,CAAQ,mBAAmB,CAAA,GAAI,IAAA,CAAK,YAAA,CAAa,gBAAA,IAAoB,YAAA;AAErE,IAAA,MAAM,QAAA,GAAW,MAAM,KAAA,CAAM,GAAA,EAAK;AAAA,MAChC,MAAA,EAAQ,MAAA;AAAA,MACR,OAAA;AAAA,MACA,IAAA,EAAM,IAAA,CAAK,SAAA,CAAU,IAAI;AAAA,KAC1B,CAAA;AAED,IAAA,IAAI,CAAC,SAAS,EAAA,EAAI;AAChB,MAAA,MAAM,KAAA,GAAQ,MAAM,QAAA,CAAS,IAAA,EAAK,CAAE,KAAA,CAAM,OAAO,EAAE,OAAA,EAAS,QAAA,CAAS,UAAA,EAAW,CAAE,CAAA;AAClF,MAAA,MAAM,YAAA,CAAa,kBAAkB,EAAE,GAAG,OAAO,MAAA,EAAQ,QAAA,CAAS,MAAA,EAAO,EAAG,QAAQ,CAAA;AAAA,IACtF;AAEA,IAAA,OAAO,IAAA,CAAK,eAAe,QAAQ,CAAA;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe,eAAe,QAAA,EAAyC;AACrE,IAAA,MAAM,MAAA,GAAS,QAAA,CAAS,IAAA,EAAM,SAAA,EAAU;AACxC,IAAA,IAAI,CAAC,MAAA,EAAQ,MAAM,IAAI,MAAM,kBAAkB,CAAA;AAE/C,IAAA,MAAM,OAAA,GAAU,IAAI,WAAA,EAAY;AAChC,IAAA,IAAI,MAAA,GAAS,EAAA;AAEb,IAAA,IAAI;AACF,MAAA,OAAO,IAAA,EAAM;AACX,QAAA,MAAM,EAAE,IAAA,EAAM,KAAA,EAAM,GAAI,MAAM,OAAO,IAAA,EAAK;AAC1C,QAAA,IAAI,IAAA,EAAM;AAEV,QAAA,MAAA,IAAU,QAAQ,MAAA,CAAO,KAAA,EAAO,EAAE,MAAA,EAAQ,MAAM,CAAA;AAChD,QAAA,MAAM,KAAA,GAAQ,MAAA,CAAO,KAAA,CAAM,IAAI,CAAA;AAC/B,QAAA,MAAA,GAAS,KAAA,CAAM,KAAI,IAAK,EAAA;AAExB,QAAA,KAAA,MAAW,QAAQ,KAAA,EAAO;AACxB,UAAA,IAAI,IAAA,CAAK,UAAA,CAAW,QAAQ,CAAA,EAAG;AAC7B,YAAA,MAAM,IAAA,GAAO,IAAA,CAAK,KAAA,CAAM,CAAC,CAAA;AACzB,YAAA,IAAI,SAAS,QAAA,EAAU;AAEvB,YAAA,IAAI;AACF,cAAA,MAAM,IAAA,CAAK,MAAM,IAAI,CAAA;AAAA,YACvB,CAAA,CAAA,MAAQ;AAAA,YAER;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAA,SAAE;AACA,MAAA,MAAA,CAAO,WAAA,EAAY;AAAA,IACrB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKU,eAAe,MAAA,EAAyB;AAChD,IAAA,OAAO,+BAAA,CAAgC,KAAK,MAAM,CAAA;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA,EAKU,cAAc,MAAA,EAAwB;AAC9C,IAAA,OAAO,UAAU,MAAM,CAAA,CAAA;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAgB,cAAA,GAAgC;AAE9C,IAAA,MAAM,WAAA,GAAc;AAAA,MAClB,KAAA,EAAO,KAAK,MAAA,CAAO,KAAA;AAAA,MACnB,UAAU,CAAC,EAAE,MAAM,MAAA,EAAiB,OAAA,EAAS,MAAM,CAAA;AAAA,MACnD,UAAA,EAAY;AAAA,KACd;AAEA,IAAA,MAAM,KAAK,iBAAA,CAAkB,WAAA,EAAa,WAAW,CAAA,CAAE,MAAM,MAAM;AAAA,IAEnE,CAAC,CAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKQ,cAAA,CAAe,UAAe,OAAA,EAAuC;AAC3E,IAAA,MAAM,KAAA,GAAQ,QAAA,CAAS,KAAA,IAAS,EAAC;AACjC,IAAA,MAAM,IAAA,GAAO,KAAK,aAAA,CAAc,KAAA,EAAO,QAAQ,KAAA,IAAS,IAAA,CAAK,OAAO,KAAK,CAAA;AAEzE,IAAA,OAAO;AAAA,MACL,aAAA,EAAe,MAAM,YAAA,IAAgB,CAAA;AAAA,MACrC,iBAAA,EAAmB,MAAM,aAAA,IAAiB,CAAA;AAAA,MAC1C,YAAA,EAAA,CAAe,KAAA,CAAM,YAAA,IAAgB,CAAA,KAAM,MAAM,aAAA,IAAiB,CAAA,CAAA;AAAA,MAClE,cAAA,EAAgB;AAAA,KAClB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,aAAA,CAAc,OAAY,KAAA,EAAuB;AACvD,IAAA,MAAM,OAAA,GAAU,IAAA,CAAK,eAAA,CAAgB,KAAK,CAAA;AAC1C,IAAA,MAAM,SAAA,GAAA,CAAc,KAAA,CAAM,YAAA,IAAgB,CAAA,IAAK,MAAQ,OAAA,CAAQ,KAAA;AAC/D,IAAA,MAAM,UAAA,GAAA,CAAe,KAAA,CAAM,aAAA,IAAiB,CAAA,IAAK,MAAQ,OAAA,CAAQ,MAAA;AACjE,IAAA,OAAO,SAAA,GAAY,UAAA;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKQ,gBAAgB,KAAA,EAAkD;AACxE,IAAA,MAAM,UAAA,GAAgE;AAAA,MACpE,4BAAA,EAA8B,EAAE,KAAA,EAAO,IAAA,EAAO,QAAQ,KAAA,EAAM;AAAA,MAC5D,2BAAA,EAA6B,EAAE,KAAA,EAAO,KAAA,EAAS,QAAQ,MAAA,EAAQ;AAAA,MAC/D,wBAAA,EAA0B,EAAE,KAAA,EAAO,KAAA,EAAO,QAAQ,KAAA,EAAM;AAAA,MACxD,0BAAA,EAA4B,EAAE,KAAA,EAAO,IAAA,EAAO,QAAQ,KAAA,EAAM;AAAA,MAC1D,yBAAA,EAA2B,EAAE,KAAA,EAAO,KAAA,EAAS,QAAQ,MAAA;AAAQ,KAC/D;AAEA,IAAA,OAAO,WAAW,KAAK,CAAA,IAAK,EAAE,KAAA,EAAO,IAAA,EAAO,QAAQ,KAAA,EAAM;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA,EAKQ,mBAAmB,OAAA,EAAmE;AAE5F,IAAA,MAAM,cAAc,OAAA,CAAQ,QAAA,CACzB,IAAI,CAAA,CAAA,KAAK,OAAO,EAAE,OAAA,KAAY,QAAA,GAAW,CAAA,CAAE,OAAA,GAAU,KAAK,SAAA,CAAU,CAAA,CAAE,OAAO,CAAC,CAAA,CAC9E,KAAK,GAAG,CAAA;AAEX,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,IAAA,CAAK,WAAA,CAAY,SAAS,CAAC,CAAA;AACpD,IAAA,MAAM,YAAA,GAAe,QAAQ,UAAA,IAAc,GAAA;AAE3C,IAAA,OAAO,EAAE,KAAA,EAAO,WAAA,EAAa,MAAA,EAAQ,YAAA,EAAa;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA,EAKQ,kBAAkB,OAAA,EAA+B;AACvD,IAAA,IAAI,IAAA,CAAK,OAAO,KAAA,EAAO;AACrB,MAAA,OAAA,CAAQ,IAAI,yBAAA,EAA2B;AAAA,QACrC,WAAW,OAAA,CAAQ,SAAA;AAAA,QACnB,UAAU,OAAA,CAAQ,QAAA;AAAA,QAClB,OAAO,OAAA,CAAQ,KAAA;AAAA,QACf,QAAA,EAAU,OAAA,CAAQ,OAAA,GAAU,OAAA,CAAQ,SAAA;AAAA,QACpC,QAAQ,OAAA,CAAQ,MAAA;AAAA,QAChB,MAAM,OAAA,CAAQ,IAAA;AAAA,QACd,SAAS,OAAA,CAAQ;AAAA,OAClB,CAAA;AAAA,IACH;AAAA,EACF;AACF;AAKO,IAAM,wBAAN,MAAuD;AAAA,EAC5D,OAAO,MAAA,EAAwC;AAC7C,IAAA,OAAO,IAAI,eAAe,MAAuC,CAAA;AAAA,EACnE;AAAA,EAEA,SAAS,QAAA,EAAgC;AACvC,IAAA,OAAO,QAAA,KAAa,QAAA;AAAA,EACtB;AACF;AAKO,SAAS,MAAA,CAAO,OAAA,GAAwB,EAAC,EAAkC;AAChF,EAAA,OAAO;AAAA,IACL,QAAA,EAAU,QAAA;AAAA,IACV,KAAA,EAAO,QAAQ,KAAA,IAAS,4BAAA;AAAA,IACxB,GAAG;AAAA,GACL;AACF;;;AC7iBA,gBAAA,CAAiB,QAAA,CAAS,QAAA,EAAU,IAAI,qBAAA,EAAuB,CAAA;AAC/D,gBAAA,CAAiB,QAAA,CAAS,QAAA,EAAU,IAAI,qBAAA,EAAuB,CAAA;AAUxD,IAAM,SAAA,GAAY;AAAA,EACvB,MAAA;AAAA,EACA;AACF;AAKO,SAAS,qBAAA,GAAwB;AACtC,EAAA,OAAO,iBAAiB,sBAAA,EAAuB;AACjD;AAKO,SAAS,oBAAoB,QAAA,EAAkB;AACpD,EAAA,OAAO,gBAAA,CAAiB,SAAS,QAAe,CAAA;AAClD;AAKA,eAAsB,mBAAA,GAAsB;AAC1C,EAAA,OAAO,iBAAiB,cAAA,EAAe;AACzC","file":"index.js","sourcesContent":["/**\n * Error Handling and Retry Mechanisms\n * \n * Implements exponential backoff, circuit breaker patterns, and provider-specific error handling\n */\n\nimport type { \n  SDKError, \n  RateLimitError, \n  AuthenticationError, \n  ValidationError, \n  ApiProvider,\n  RequestMetrics \n} from '../types';\n\n/**\n * Custom SDK Error Classes\n */\nexport class BaseSDKError extends Error implements SDKError {\n  public readonly code: string;\n  public readonly statusCode?: number;\n  public readonly provider?: ApiProvider;\n  public readonly requestId?: string;\n  public readonly details?: Record<string, any>;\n\n  constructor(\n    message: string,\n    code: string,\n    options?: {\n      statusCode?: number;\n      provider?: ApiProvider;\n      requestId?: string;\n      details?: Record<string, any>;\n      cause?: Error;\n    }\n  ) {\n    super(message, { cause: options?.cause });\n    this.name = this.constructor.name;\n    this.code = code;\n    this.statusCode = options?.statusCode;\n    this.provider = options?.provider;\n    this.requestId = options?.requestId;\n    this.details = options?.details;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SDKRateLimitError extends BaseSDKError implements RateLimitError {\n  public readonly code = 'RATE_LIMIT_EXCEEDED';\n  public readonly retryAfter?: number;\n  public readonly limitType: 'requests' | 'tokens' | 'cost';\n\n  constructor(\n    message: string,\n    limitType: 'requests' | 'tokens' | 'cost',\n    options?: {\n      retryAfter?: number;\n      statusCode?: number;\n      provider?: ApiProvider;\n      requestId?: string;\n      details?: Record<string, any>;\n      cause?: Error;\n    }\n  ) {\n    super(message, 'RATE_LIMIT_EXCEEDED', options);\n    this.limitType = limitType;\n    this.retryAfter = options?.retryAfter;\n  }\n}\n\nexport class SDKAuthenticationError extends BaseSDKError implements AuthenticationError {\n  public readonly code = 'AUTHENTICATION_FAILED';\n  public readonly provider: ApiProvider;\n\n  constructor(\n    message: string,\n    provider: ApiProvider,\n    options?: {\n      statusCode?: number;\n      requestId?: string;\n      details?: Record<string, any>;\n      cause?: Error;\n    }\n  ) {\n    super(message, 'AUTHENTICATION_FAILED', { ...options, provider });\n    this.provider = provider;\n  }\n}\n\nexport class SDKValidationError extends BaseSDKError implements ValidationError {\n  public readonly code = 'VALIDATION_ERROR';\n  public readonly field: string;\n  public readonly value: any;\n\n  constructor(\n    message: string,\n    field: string,\n    value: any,\n    options?: {\n      statusCode?: number;\n      provider?: ApiProvider;\n      requestId?: string;\n      details?: Record<string, any>;\n      cause?: Error;\n    }\n  ) {\n    super(message, 'VALIDATION_ERROR', options);\n    this.field = field;\n    this.value = value;\n  }\n}\n\n/**\n * Error Factory - Creates appropriate error types from provider responses\n */\nexport class ErrorFactory {\n  static fromProviderError(\n    error: any,\n    provider: ApiProvider,\n    requestId?: string\n  ): SDKError {\n    // OpenAI error handling\n    if (provider === 'openai') {\n      return this.fromOpenAIError(error, requestId);\n    }\n\n    // Claude error handling\n    if (provider === 'claude') {\n      return this.fromClaudeError(error, requestId);\n    }\n\n    // Generic error handling\n    return this.fromGenericError(error, provider, requestId);\n  }\n\n  private static fromOpenAIError(error: any, requestId?: string): SDKError {\n    const statusCode = error.status || error.statusCode || 500;\n    const message = error.message || error.error?.message || 'OpenAI API error';\n\n    // Rate limiting\n    if (statusCode === 429) {\n      const retryAfter = error.headers?.['retry-after'] \n        ? parseInt(error.headers['retry-after'], 10) \n        : undefined;\n      \n      return new SDKRateLimitError(\n        message,\n        'requests',\n        {\n          retryAfter,\n          statusCode,\n          provider: 'openai',\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Authentication errors\n    if (statusCode === 401) {\n      return new SDKAuthenticationError(\n        message,\n        'openai',\n        {\n          statusCode,\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Validation errors\n    if (statusCode === 400) {\n      return new SDKValidationError(\n        message,\n        error.error?.param || 'unknown',\n        error.error?.code || 'unknown',\n        {\n          statusCode,\n          provider: 'openai',\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Generic OpenAI error\n    return new BaseSDKError(\n      message,\n      'OPENAI_API_ERROR',\n      {\n        statusCode,\n        provider: 'openai',\n        requestId,\n        details: { originalError: error },\n        cause: error\n      }\n    );\n  }\n\n  private static fromClaudeError(error: any, requestId?: string): SDKError {\n    const statusCode = error.status || error.statusCode || 500;\n    const message = error.message || error.error?.message || 'Claude API error';\n\n    // Rate limiting\n    if (statusCode === 429) {\n      const retryAfter = error.headers?.['retry-after'] \n        ? parseInt(error.headers['retry-after'], 10) \n        : undefined;\n      \n      return new SDKRateLimitError(\n        message,\n        'requests',\n        {\n          retryAfter,\n          statusCode,\n          provider: 'claude',\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Authentication errors\n    if (statusCode === 401) {\n      return new SDKAuthenticationError(\n        message,\n        'claude',\n        {\n          statusCode,\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Validation errors\n    if (statusCode === 400) {\n      return new SDKValidationError(\n        message,\n        error.error?.param || 'unknown',\n        error.error?.code || 'unknown',\n        {\n          statusCode,\n          provider: 'claude',\n          requestId,\n          details: { originalError: error }\n        }\n      );\n    }\n\n    // Generic Claude error\n    return new BaseSDKError(\n      message,\n      'CLAUDE_API_ERROR',\n      {\n        statusCode,\n        provider: 'claude',\n        requestId,\n        details: { originalError: error },\n        cause: error\n      }\n    );\n  }\n\n  private static fromGenericError(\n    error: any,\n    provider: ApiProvider,\n    requestId?: string\n  ): SDKError {\n    const statusCode = error.status || error.statusCode || 500;\n    const message = error.message || `${provider} API error`;\n\n    return new BaseSDKError(\n      message,\n      'API_ERROR',\n      {\n        statusCode,\n        provider,\n        requestId,\n        details: { originalError: error },\n        cause: error\n      }\n    );\n  }\n}\n\n/**\n * Retry Configuration and Logic\n */\nexport interface RetryConfig {\n  maxRetries: number;\n  baseDelay: number;\n  maxDelay: number;\n  backoffMultiplier: number;\n  jitter: boolean;\n  retryableErrors: string[];\n}\n\nexport const DEFAULT_RETRY_CONFIG: RetryConfig = {\n  maxRetries: 3,\n  baseDelay: 1000, // 1 second\n  maxDelay: 30000, // 30 seconds\n  backoffMultiplier: 2,\n  jitter: true,\n  retryableErrors: [\n    'RATE_LIMIT_EXCEEDED',\n    'NETWORK_ERROR',\n    'TIMEOUT',\n    'SERVER_ERROR',\n    'TEMPORARY_FAILURE'\n  ]\n};\n\nexport class RetryHandler {\n  private config: RetryConfig;\n\n  constructor(config: Partial<RetryConfig> = {}) {\n    this.config = { ...DEFAULT_RETRY_CONFIG, ...config };\n  }\n\n  /**\n   * Execute a function with retry logic\n   */\n  async execute<T>(\n    fn: () => Promise<T>,\n    context?: {\n      provider?: ApiProvider;\n      requestId?: string;\n      operation?: string;\n    }\n  ): Promise<T> {\n    let lastError: SDKError | null = null;\n    let attempt = 0;\n\n    while (attempt <= this.config.maxRetries) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error instanceof BaseSDKError \n          ? error \n          : this.convertToSDKError(error, context?.provider);\n\n        // Don't retry on last attempt\n        if (attempt === this.config.maxRetries) {\n          break;\n        }\n\n        // Check if error is retryable\n        if (!this.isRetryableError(lastError)) {\n          break;\n        }\n\n        // Calculate delay for next attempt\n        const delay = this.calculateDelay(attempt, lastError);\n        \n        console.warn(`Attempt ${attempt + 1} failed, retrying in ${delay}ms`, {\n          error: lastError.code,\n          provider: context?.provider,\n          requestId: context?.requestId,\n          operation: context?.operation\n        });\n\n        await this.sleep(delay);\n        attempt++;\n      }\n    }\n\n    // All attempts failed, throw the last error\n    throw lastError;\n  }\n\n  /**\n   * Check if an error should trigger a retry\n   */\n  private isRetryableError(error: SDKError): boolean {\n    // Don't retry authentication or validation errors\n    if (error.code === 'AUTHENTICATION_FAILED' || error.code === 'VALIDATION_ERROR') {\n      return false;\n    }\n\n    // Retry rate limit errors\n    if (error.code === 'RATE_LIMIT_EXCEEDED') {\n      return true;\n    }\n\n    // Retry server errors (5xx)\n    if (error.statusCode && error.statusCode >= 500) {\n      return true;\n    }\n\n    // Retry network/timeout errors\n    if (this.config.retryableErrors.includes(error.code)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculate exponential backoff delay with jitter\n   */\n  private calculateDelay(attempt: number, error: SDKError): number {\n    // Use retry-after header if available (rate limit errors)\n    if (error instanceof SDKRateLimitError && error.retryAfter) {\n      return error.retryAfter * 1000; // Convert seconds to milliseconds\n    }\n\n    // Exponential backoff\n    let delay = this.config.baseDelay * Math.pow(this.config.backoffMultiplier, attempt);\n    \n    // Cap at max delay\n    delay = Math.min(delay, this.config.maxDelay);\n\n    // Add jitter to avoid thundering herd\n    if (this.config.jitter) {\n      delay = delay * (0.5 + Math.random() * 0.5);\n    }\n\n    return Math.floor(delay);\n  }\n\n  /**\n   * Convert generic error to SDK error\n   */\n  private convertToSDKError(error: any, provider?: ApiProvider): SDKError {\n    if (error instanceof BaseSDKError) {\n      return error;\n    }\n\n    // Network/timeout errors\n    if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {\n      return new BaseSDKError(\n        `Network error: ${error.message}`,\n        'NETWORK_ERROR',\n        { provider, cause: error }\n      );\n    }\n\n    // Generic error\n    return new BaseSDKError(\n      error.message || 'Unknown error',\n      'UNKNOWN_ERROR',\n      { provider, cause: error }\n    );\n  }\n\n  /**\n   * Sleep utility\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n/**\n * Circuit Breaker Pattern Implementation\n */\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;\n  recoveryTimeout: number;\n  monitoringPeriod: number;\n}\n\nexport enum CircuitState {\n  CLOSED = 'closed',\n  OPEN = 'open',\n  HALF_OPEN = 'half_open'\n}\n\nexport class CircuitBreaker {\n  private state: CircuitState = CircuitState.CLOSED;\n  private failures: number = 0;\n  private lastFailureTime: number = 0;\n  private nextAttempt: number = 0;\n  private config: CircuitBreakerConfig;\n\n  constructor(config: Partial<CircuitBreakerConfig> = {}) {\n    this.config = {\n      failureThreshold: 5,\n      recoveryTimeout: 60000, // 1 minute\n      monitoringPeriod: 60000, // 1 minute\n      ...config\n    };\n  }\n\n  /**\n   * Execute function through circuit breaker\n   */\n  async execute<T>(fn: () => Promise<T>): Promise<T> {\n    if (this.state === CircuitState.OPEN) {\n      if (Date.now() < this.nextAttempt) {\n        throw new BaseSDKError(\n          'Circuit breaker is OPEN - too many recent failures',\n          'CIRCUIT_BREAKER_OPEN'\n        );\n      } else {\n        this.state = CircuitState.HALF_OPEN;\n      }\n    }\n\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (error) {\n      this.onFailure();\n      throw error;\n    }\n  }\n\n  private onSuccess(): void {\n    this.failures = 0;\n    this.state = CircuitState.CLOSED;\n  }\n\n  private onFailure(): void {\n    this.failures++;\n    this.lastFailureTime = Date.now();\n\n    if (this.failures >= this.config.failureThreshold) {\n      this.state = CircuitState.OPEN;\n      this.nextAttempt = Date.now() + this.config.recoveryTimeout;\n    }\n  }\n\n  /**\n   * Get current circuit breaker status\n   */\n  getStatus(): {\n    state: CircuitState;\n    failures: number;\n    lastFailureTime: number;\n    nextAttempt: number;\n  } {\n    return {\n      state: this.state,\n      failures: this.failures,\n      lastFailureTime: this.lastFailureTime,\n      nextAttempt: this.nextAttempt\n    };\n  }\n}\n\n/**\n * Request timeout wrapper\n */\nexport function withTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n  context?: { operation?: string; provider?: ApiProvider }\n): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<never>((_, reject) => {\n      setTimeout(() => {\n        reject(new BaseSDKError(\n          `Operation timed out after ${timeoutMs}ms`,\n          'TIMEOUT',\n          {\n            provider: context?.provider,\n            details: { timeoutMs, operation: context?.operation }\n          }\n        ));\n      }, timeoutMs);\n    })\n  ]);\n}\n\n/**\n * Utility function to sanitize errors for logging\n */\nexport function sanitizeErrorForLogging(error: any): Record<string, any> {\n  const sanitized: Record<string, any> = {\n    name: error.name || 'Error',\n    message: error.message || 'Unknown error',\n    code: error.code,\n    statusCode: error.statusCode,\n    provider: error.provider,\n    requestId: error.requestId\n  };\n\n  // Remove sensitive information\n  if (error.details) {\n    sanitized.details = { ...error.details };\n    \n    // Remove API keys\n    if (sanitized.details.apiKey) {\n      sanitized.details.apiKey = '[REDACTED]';\n    }\n    \n    // Remove authorization headers\n    if (sanitized.details.headers?.authorization) {\n      sanitized.details.headers.authorization = '[REDACTED]';\n    }\n  }\n\n  return sanitized;\n}","/**\n * Base Provider Interface and Abstract Implementation\n * \n * Defines the unified interface that all AI providers must implement\n */\n\nimport type {\n  ApiProvider,\n  ChatCompletionRequest,\n  ChatCompletionResponse,\n  ChatCompletionChunk,\n  ImageGenerationRequest,\n  ImageGenerationResponse,\n  ProviderConfig,\n  ProviderCapabilities,\n  SDKError,\n  RequestMetrics,\n  Usage\n} from '../types';\n\nimport { RetryHandler, CircuitBreaker, withTimeout } from '../utils/errors';\n\nexport interface BaseProviderOptions {\n  apiKey?: string;\n  baseURL?: string;\n  timeout?: number;\n  maxRetries?: number;\n  retryDelay?: number;\n  userAgent?: string;\n  debug?: boolean;\n}\n\n/**\n * Abstract base class for all AI providers\n */\nexport abstract class BaseProvider {\n  protected readonly provider: ApiProvider;\n  protected readonly config: ProviderConfig;\n  protected readonly retryHandler: RetryHandler;\n  protected readonly circuitBreaker: CircuitBreaker;\n\n  constructor(provider: ApiProvider, config: ProviderConfig) {\n    this.provider = provider;\n    this.config = config;\n    this.retryHandler = new RetryHandler({\n      maxRetries: config.maxRetries || 3,\n      baseDelay: config.retryDelay || 1000\n    });\n    this.circuitBreaker = new CircuitBreaker();\n  }\n\n  /**\n   * Provider capabilities - must be implemented by each provider\n   */\n  abstract getCapabilities(): ProviderCapabilities;\n\n  /**\n   * Chat completion - core method all providers must implement\n   */\n  abstract chatCompletion(request: ChatCompletionRequest): Promise<ChatCompletionResponse>;\n\n  /**\n   * Streaming chat completion - optional, defaults to error\n   */\n  abstract streamChatCompletion(\n    request: ChatCompletionRequest\n  ): AsyncGenerator<ChatCompletionChunk, void, unknown>;\n\n  /**\n   * Image generation - optional, defaults to error if not supported\n   */\n  generateImages(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {\n    throw new Error(`Image generation not supported by ${this.provider} provider`);\n  }\n\n  /**\n   * Provider-specific model validation\n   */\n  abstract validateModel(model: string): boolean;\n\n  /**\n   * Get available models for this provider\n   */\n  abstract getAvailableModels(): string[];\n\n  /**\n   * Estimate cost for a request\n   */\n  abstract estimateCost(request: ChatCompletionRequest): number;\n\n  /**\n   * Transform provider-specific response to unified format\n   */\n  protected abstract transformResponse(\n    response: any,\n    request: ChatCompletionRequest,\n    metrics: Partial<RequestMetrics>\n  ): ChatCompletionResponse;\n\n  /**\n   * Transform provider-specific streaming response to unified format\n   */\n  protected abstract transformStreamChunk(\n    chunk: any,\n    request: ChatCompletionRequest\n  ): ChatCompletionChunk | null;\n\n  /**\n   * Execute request with retry logic and circuit breaker\n   */\n  protected async executeWithRetry<T>(\n    fn: () => Promise<T>,\n    context?: {\n      requestId?: string;\n      operation?: string;\n    }\n  ): Promise<T> {\n    const requestId = context?.requestId || this.generateRequestId();\n    \n    return this.circuitBreaker.execute(async () => {\n      return this.retryHandler.execute(fn, {\n        provider: this.provider,\n        requestId,\n        operation: context?.operation\n      });\n    });\n  }\n\n  /**\n   * Execute request with timeout\n   */\n  protected async executeWithTimeout<T>(\n    promise: Promise<T>,\n    operation: string\n  ): Promise<T> {\n    const timeout = this.config.timeout || 30000; // 30 seconds default\n    \n    return withTimeout(promise, timeout, {\n      operation,\n      provider: this.provider\n    });\n  }\n\n  /**\n   * Create request metrics for tracking\n   */\n  protected createRequestMetrics(\n    requestId: string,\n    model: string,\n    startTime: number\n  ): Partial<RequestMetrics> {\n    return {\n      requestId,\n      provider: this.provider,\n      model,\n      startTime,\n      endTime: 0,\n      tokens: { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0, estimated_cost: 0 },\n      cost: 0,\n      success: false\n    };\n  }\n\n  /**\n   * Finalize request metrics\n   */\n  protected finalizeMetrics(\n    metrics: Partial<RequestMetrics>,\n    usage: Usage,\n    success: boolean,\n    error?: SDKError\n  ): RequestMetrics {\n    return {\n      ...metrics,\n      endTime: Date.now(),\n      tokens: usage,\n      cost: usage.estimated_cost,\n      success,\n      error\n    } as RequestMetrics;\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  protected generateRequestId(): string {\n    return `${this.provider}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Validate API key format for this provider\n   */\n  protected abstract validateApiKey(apiKey: string): boolean;\n\n  /**\n   * Get default headers for requests\n   */\n  protected getDefaultHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'User-Agent': this.config.userAgent || `ai-marketplace-sdk/0.1.0 (${this.provider})`\n    };\n\n    if (this.config.apiKey) {\n      headers['Authorization'] = this.getAuthHeader(this.config.apiKey);\n    }\n\n    return headers;\n  }\n\n  /**\n   * Get provider-specific authorization header\n   */\n  protected abstract getAuthHeader(apiKey: string): string;\n\n  /**\n   * Health check for the provider\n   */\n  async healthCheck(): Promise<{\n    provider: ApiProvider;\n    healthy: boolean;\n    latency?: number;\n    error?: string;\n    capabilities: ProviderCapabilities;\n    circuitBreakerStatus: any;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Simple test request to verify provider is accessible\n      await this.executeWithTimeout(\n        this.testConnection(),\n        'health_check'\n      );\n\n      return {\n        provider: this.provider,\n        healthy: true,\n        latency: Date.now() - startTime,\n        capabilities: this.getCapabilities(),\n        circuitBreakerStatus: this.circuitBreaker.getStatus()\n      };\n    } catch (error) {\n      return {\n        provider: this.provider,\n        healthy: false,\n        latency: Date.now() - startTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        capabilities: this.getCapabilities(),\n        circuitBreakerStatus: this.circuitBreaker.getStatus()\n      };\n    }\n  }\n\n  /**\n   * Test connection to provider - should be implemented by each provider\n   */\n  protected abstract testConnection(): Promise<void>;\n\n  /**\n   * Get provider configuration (without sensitive data)\n   */\n  getConfig(): Omit<ProviderConfig, 'apiKey'> {\n    const { apiKey, ...safeConfig } = this.config;\n    return safeConfig;\n  }\n\n  /**\n   * Update provider configuration\n   */\n  updateConfig(updates: Partial<BaseProviderOptions>): void {\n    Object.assign(this.config, updates);\n  }\n}\n\n/**\n * Provider factory interface\n */\nexport interface ProviderFactory {\n  create(config: ProviderConfig): BaseProvider;\n  supports(provider: ApiProvider): boolean;\n}\n\n/**\n * Provider registry for managing multiple providers\n */\nexport class ProviderRegistry {\n  private factories = new Map<ApiProvider, ProviderFactory>();\n  private instances = new Map<string, BaseProvider>();\n\n  /**\n   * Register a provider factory\n   */\n  register(provider: ApiProvider, factory: ProviderFactory): void {\n    this.factories.set(provider, factory);\n  }\n\n  /**\n   * Get or create a provider instance\n   */\n  getProvider(config: ProviderConfig): BaseProvider {\n    const key = `${config.provider}-${config.model}`;\n    \n    if (this.instances.has(key)) {\n      return this.instances.get(key)!;\n    }\n\n    const factory = this.factories.get(config.provider);\n    if (!factory) {\n      throw new Error(`No factory registered for provider: ${config.provider}`);\n    }\n\n    const instance = factory.create(config);\n    this.instances.set(key, instance);\n    return instance;\n  }\n\n  /**\n   * Get all registered providers\n   */\n  getRegisteredProviders(): ApiProvider[] {\n    return Array.from(this.factories.keys());\n  }\n\n  /**\n   * Check if provider is supported\n   */\n  supports(provider: ApiProvider): boolean {\n    return this.factories.has(provider);\n  }\n\n  /**\n   * Clear all cached instances\n   */\n  clearCache(): void {\n    this.instances.clear();\n  }\n\n  /**\n   * Health check all providers\n   */\n  async healthCheckAll(): Promise<Record<string, any>> {\n    const results: Record<string, any> = {};\n    \n    for (const [provider, factory] of this.factories) {\n      try {\n        // Create a test instance with minimal config\n        const testInstance = factory.create({\n          provider,\n          model: 'test',\n          apiKey: 'test'\n        });\n        \n        results[provider] = await testInstance.healthCheck();\n      } catch (error) {\n        results[provider] = {\n          provider,\n          healthy: false,\n          error: error instanceof Error ? error.message : 'Unknown error'\n        };\n      }\n    }\n\n    return results;\n  }\n}\n\n// Global provider registry instance\nexport const providerRegistry = new ProviderRegistry();","/**\n * OpenAI Provider Implementation\n * \n * Provides OpenAI API integration with unified interface\n */\n\nimport type {\n  ApiProvider,\n  ChatCompletionRequest,\n  ChatCompletionResponse,\n  ChatCompletionChunk,\n  ImageGenerationRequest,\n  ImageGenerationResponse,\n  ProviderConfig,\n  ProviderCapabilities,\n  RequestMetrics,\n  Usage\n} from '../types';\n\nimport { BaseProvider, type BaseProviderOptions, type ProviderFactory } from './base';\nimport { ErrorFactory } from '../utils/errors';\n\n/**\n * OpenAI-specific configuration\n */\nexport interface OpenAIConfig extends BaseProviderOptions {\n  organization?: string;\n  project?: string;\n}\n\n/**\n * OpenAI Provider Implementation\n */\nexport class OpenAIProvider extends BaseProvider {\n  private readonly openaiConfig: OpenAIConfig;\n\n  constructor(config: ProviderConfig & OpenAIConfig) {\n    super('openai', config);\n    this.openaiConfig = config;\n  }\n\n  /**\n   * Get OpenAI provider capabilities\n   */\n  getCapabilities(): ProviderCapabilities {\n    return {\n      chat: true,\n      images: true,\n      embeddings: true,\n      tools: true,\n      streaming: true,\n      vision: true,\n      maxTokens: 128000,\n      costPer1kTokens: { input: 0.01, output: 0.03 }\n    };\n  }\n\n  /**\n   * Validate OpenAI model\n   */\n  validateModel(model: string): boolean {\n    const validModels = this.getAvailableModels();\n    return validModels.includes(model);\n  }\n\n  /**\n   * Get available OpenAI models\n   */\n  getAvailableModels(): string[] {\n    return [\n      'gpt-4o',\n      'gpt-4o-mini',\n      'gpt-4-turbo',\n      'gpt-4',\n      'gpt-3.5-turbo',\n      'gpt-3.5-turbo-16k'\n    ];\n  }\n\n  /**\n   * Estimate cost for OpenAI request\n   */\n  estimateCost(request: ChatCompletionRequest): number {\n    const model = request.model || this.config.model;\n    const tokenCount = this.estimateTokenCount(request);\n    \n    // Model-specific pricing (per 1k tokens)\n    const pricing = this.getModelPricing(model);\n    const inputCost = (tokenCount.input / 1000) * pricing.input;\n    const outputCost = (tokenCount.output / 1000) * pricing.output;\n    \n    return inputCost + outputCost;\n  }\n\n  /**\n   * Chat completion implementation\n   */\n  async chatCompletion(request: ChatCompletionRequest): Promise<ChatCompletionResponse> {\n    const requestId = this.generateRequestId();\n    const startTime = Date.now();\n    const metrics = this.createRequestMetrics(requestId, request.model || this.config.model, startTime);\n\n    return this.executeWithRetry(async () => {\n      const openaiRequest = this.transformRequest(request);\n      \n      const response = await this.executeWithTimeout(\n        this.makeOpenAIRequest('/chat/completions', openaiRequest),\n        'chat_completion'\n      );\n\n      const usage = this.calculateUsage(response, request);\n      const transformedResponse = this.transformResponse(response, request, metrics);\n      \n      // Log successful request metrics\n      this.logRequestMetrics(this.finalizeMetrics(metrics, usage, true));\n      \n      return transformedResponse;\n    }, { requestId, operation: 'chat_completion' });\n  }\n\n  /**\n   * Streaming chat completion implementation\n   */\n  async* streamChatCompletion(\n    request: ChatCompletionRequest\n  ): AsyncGenerator<ChatCompletionChunk, void, unknown> {\n    const requestId = this.generateRequestId();\n    const openaiRequest = { ...this.transformRequest(request), stream: true };\n\n    const response = await this.executeWithTimeout(\n      this.makeOpenAIStreamRequest('/chat/completions', openaiRequest),\n      'stream_chat_completion'\n    );\n\n    let totalUsage: Usage = {\n      prompt_tokens: 0,\n      completion_tokens: 0,\n      total_tokens: 0,\n      estimated_cost: 0\n    };\n\n    try {\n      for await (const chunk of response) {\n        const transformedChunk = this.transformStreamChunk(chunk, request);\n        if (transformedChunk) {\n          if (transformedChunk.usage) {\n            totalUsage = transformedChunk.usage;\n          }\n          yield transformedChunk;\n        }\n      }\n    } catch (error) {\n      throw ErrorFactory.fromProviderError(error, 'openai', requestId);\n    }\n  }\n\n  /**\n   * Image generation implementation\n   */\n  async generateImages(request: ImageGenerationRequest): Promise<ImageGenerationResponse> {\n    const requestId = this.generateRequestId();\n\n    return this.executeWithRetry(async () => {\n      const openaiRequest = this.transformImageRequest(request);\n      \n      const response = await this.executeWithTimeout(\n        this.makeOpenAIRequest('/images/generations', openaiRequest),\n        'image_generation'\n      );\n\n      return this.transformImageResponse(response);\n    }, { requestId, operation: 'image_generation' });\n  }\n\n  /**\n   * Transform unified request to OpenAI format\n   */\n  private transformRequest(request: ChatCompletionRequest): any {\n    const openaiRequest: any = {\n      model: request.model || this.config.model,\n      messages: request.messages.map(msg => ({\n        role: msg.role,\n        content: msg.content,\n        ...(msg.name && { name: msg.name }),\n        ...(msg.tool_calls && { tool_calls: msg.tool_calls }),\n        ...(msg.tool_call_id && { tool_call_id: msg.tool_call_id })\n      })),\n      ...(request.temperature !== undefined && { temperature: request.temperature }),\n      ...(request.max_tokens !== undefined && { max_tokens: request.max_tokens }),\n      ...(request.top_p !== undefined && { top_p: request.top_p }),\n      ...(request.frequency_penalty !== undefined && { frequency_penalty: request.frequency_penalty }),\n      ...(request.presence_penalty !== undefined && { presence_penalty: request.presence_penalty }),\n      ...(request.stop && { stop: request.stop }),\n      ...(request.tools && { tools: request.tools }),\n      ...(request.tool_choice && { tool_choice: request.tool_choice }),\n      ...(request.user && { user: request.user })\n    };\n\n    return openaiRequest;\n  }\n\n  /**\n   * Transform OpenAI response to unified format\n   */\n  protected transformResponse(\n    response: any,\n    request: ChatCompletionRequest,\n    metrics: Partial<RequestMetrics>\n  ): ChatCompletionResponse {\n    return {\n      id: response.id,\n      object: 'chat.completion',\n      created: response.created,\n      model: response.model,\n      provider: 'openai',\n      choices: response.choices.map((choice: any) => ({\n        index: choice.index,\n        message: {\n          role: choice.message.role,\n          content: choice.message.content,\n          ...(choice.message.tool_calls && { tool_calls: choice.message.tool_calls })\n        },\n        finish_reason: choice.finish_reason,\n        ...(choice.logprobs && { logprobs: choice.logprobs })\n      })),\n      usage: {\n        prompt_tokens: response.usage.prompt_tokens,\n        completion_tokens: response.usage.completion_tokens,\n        total_tokens: response.usage.total_tokens,\n        estimated_cost: this.calculateCost(response.usage, request.model || this.config.model)\n      },\n      ...(response.system_fingerprint && { system_fingerprint: response.system_fingerprint })\n    };\n  }\n\n  /**\n   * Transform OpenAI streaming chunk to unified format\n   */\n  protected transformStreamChunk(\n    chunk: any,\n    request: ChatCompletionRequest\n  ): ChatCompletionChunk | null {\n    if (!chunk || chunk === '[DONE]') {\n      return null;\n    }\n\n    // Parse SSE data\n    let data;\n    try {\n      data = typeof chunk === 'string' ? JSON.parse(chunk) : chunk;\n    } catch {\n      return null;\n    }\n\n    return {\n      id: data.id,\n      object: 'chat.completion.chunk',\n      created: data.created,\n      model: data.model,\n      provider: 'openai',\n      choices: data.choices.map((choice: any) => ({\n        index: choice.index,\n        delta: {\n          ...(choice.delta.role && { role: choice.delta.role }),\n          ...(choice.delta.content && { content: choice.delta.content }),\n          ...(choice.delta.tool_calls && { tool_calls: choice.delta.tool_calls })\n        },\n        finish_reason: choice.finish_reason\n      })),\n      ...(data.usage && {\n        usage: {\n          prompt_tokens: data.usage.prompt_tokens,\n          completion_tokens: data.usage.completion_tokens,\n          total_tokens: data.usage.total_tokens,\n          estimated_cost: this.calculateCost(data.usage, request.model || this.config.model)\n        }\n      })\n    };\n  }\n\n  /**\n   * Transform unified image request to OpenAI format\n   */\n  private transformImageRequest(request: ImageGenerationRequest): any {\n    return {\n      prompt: request.prompt,\n      model: request.model || 'dall-e-3',\n      n: request.n || 1,\n      size: request.size || '1024x1024',\n      quality: request.quality || 'standard',\n      style: request.style || 'vivid',\n      response_format: request.response_format || 'url',\n      ...(request.user && { user: request.user })\n    };\n  }\n\n  /**\n   * Transform OpenAI image response to unified format\n   */\n  private transformImageResponse(response: any): ImageGenerationResponse {\n    return {\n      created: response.created,\n      data: response.data.map((item: any) => ({\n        url: item.url,\n        b64_json: item.b64_json,\n        revised_prompt: item.revised_prompt\n      })),\n      provider: 'openai',\n      usage: {\n        estimated_cost: this.calculateImageCost(response.data.length)\n      }\n    };\n  }\n\n  /**\n   * Make HTTP request to OpenAI API\n   */\n  private async makeOpenAIRequest(endpoint: string, data: any): Promise<any> {\n    const url = `${this.config.baseURL || 'https://api.openai.com/v1'}${endpoint}`;\n    const headers = this.getDefaultHeaders();\n\n    // Add OpenAI-specific headers\n    if (this.openaiConfig.organization) {\n      headers['OpenAI-Organization'] = this.openaiConfig.organization;\n    }\n    if (this.openaiConfig.project) {\n      headers['OpenAI-Project'] = this.openaiConfig.project;\n    }\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(data)\n      });\n\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({ message: response.statusText }));\n        throw ErrorFactory.fromProviderError({ ...error, status: response.status }, 'openai');\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw ErrorFactory.fromProviderError(error, 'openai');\n    }\n  }\n\n  /**\n   * Make streaming HTTP request to OpenAI API\n   */\n  private async makeOpenAIStreamRequest(endpoint: string, data: any): Promise<AsyncGenerator<any>> {\n    const url = `${this.config.baseURL || 'https://api.openai.com/v1'}${endpoint}`;\n    const headers = { ...this.getDefaultHeaders(), 'Accept': 'text/event-stream' };\n\n    // Add OpenAI-specific headers\n    if (this.openaiConfig.organization) {\n      headers['OpenAI-Organization'] = this.openaiConfig.organization;\n    }\n    if (this.openaiConfig.project) {\n      headers['OpenAI-Project'] = this.openaiConfig.project;\n    }\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ message: response.statusText }));\n      throw ErrorFactory.fromProviderError({ ...error, status: response.status }, 'openai');\n    }\n\n    return this.parseSSEStream(response);\n  }\n\n  /**\n   * Parse Server-Sent Events stream\n   */\n  private async* parseSSEStream(response: Response): AsyncGenerator<any> {\n    const reader = response.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') return;\n            \n            try {\n              yield JSON.parse(data);\n            } catch {\n              // Skip malformed JSON\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  /**\n   * Validate OpenAI API key format\n   */\n  protected validateApiKey(apiKey: string): boolean {\n    return /^sk-[a-zA-Z0-9]{48}$/.test(apiKey);\n  }\n\n  /**\n   * Get OpenAI authorization header\n   */\n  protected getAuthHeader(apiKey: string): string {\n    return `Bearer ${apiKey}`;\n  }\n\n  /**\n   * Test connection to OpenAI API\n   */\n  protected async testConnection(): Promise<void> {\n    await this.makeOpenAIRequest('/models', {}).catch(() => {\n      // Simple connectivity test - models endpoint\n    });\n  }\n\n  /**\n   * Calculate usage and cost\n   */\n  private calculateUsage(response: any, request: ChatCompletionRequest): Usage {\n    const usage = response.usage;\n    const cost = this.calculateCost(usage, request.model || this.config.model);\n    \n    return {\n      prompt_tokens: usage.prompt_tokens,\n      completion_tokens: usage.completion_tokens,\n      total_tokens: usage.total_tokens,\n      estimated_cost: cost\n    };\n  }\n\n  /**\n   * Calculate cost based on usage and model\n   */\n  private calculateCost(usage: any, model: string): number {\n    const pricing = this.getModelPricing(model);\n    const inputCost = (usage.prompt_tokens / 1000) * pricing.input;\n    const outputCost = (usage.completion_tokens / 1000) * pricing.output;\n    return inputCost + outputCost;\n  }\n\n  /**\n   * Get model-specific pricing\n   */\n  private getModelPricing(model: string): { input: number; output: number } {\n    const pricingMap: Record<string, { input: number; output: number }> = {\n      'gpt-4o': { input: 0.005, output: 0.015 },\n      'gpt-4o-mini': { input: 0.00015, output: 0.0006 },\n      'gpt-4-turbo': { input: 0.01, output: 0.03 },\n      'gpt-4': { input: 0.03, output: 0.06 },\n      'gpt-3.5-turbo': { input: 0.0015, output: 0.002 },\n      'gpt-3.5-turbo-16k': { input: 0.003, output: 0.004 }\n    };\n\n    return pricingMap[model] || { input: 0.01, output: 0.03 }; // Default pricing\n  }\n\n  /**\n   * Calculate image generation cost\n   */\n  private calculateImageCost(imageCount: number): number {\n    return imageCount * 0.04; // $0.04 per image for DALL-E 3\n  }\n\n  /**\n   * Estimate token count for cost calculation\n   */\n  private estimateTokenCount(request: ChatCompletionRequest): { input: number; output: number } {\n    // Rough estimation - 4 characters per token\n    const messageText = request.messages\n      .map(m => typeof m.content === 'string' ? m.content : JSON.stringify(m.content))\n      .join(' ');\n    \n    const inputTokens = Math.ceil(messageText.length / 4);\n    const outputTokens = request.max_tokens || 1000;\n\n    return { input: inputTokens, output: outputTokens };\n  }\n\n  /**\n   * Log request metrics for analytics\n   */\n  private logRequestMetrics(metrics: RequestMetrics): void {\n    if (this.config.debug) {\n      console.log('OpenAI Request Metrics:', {\n        requestId: metrics.requestId,\n        provider: metrics.provider,\n        model: metrics.model,\n        duration: metrics.endTime - metrics.startTime,\n        tokens: metrics.tokens,\n        cost: metrics.cost,\n        success: metrics.success\n      });\n    }\n  }\n}\n\n/**\n * OpenAI Provider Factory\n */\nexport class OpenAIProviderFactory implements ProviderFactory {\n  create(config: ProviderConfig): OpenAIProvider {\n    return new OpenAIProvider(config as ProviderConfig & OpenAIConfig);\n  }\n\n  supports(provider: ApiProvider): boolean {\n    return provider === 'openai';\n  }\n}\n\n/**\n * Convenience function to create OpenAI provider\n */\nexport function openai(options: OpenAIConfig = {}): ProviderConfig & OpenAIConfig {\n  return {\n    provider: 'openai',\n    model: options.model || 'gpt-4o',\n    ...options\n  };\n}","/**\n * Claude Provider Implementation\n * \n * Provides Anthropic Claude API integration with unified interface\n */\n\nimport type {\n  ApiProvider,\n  ChatCompletionRequest,\n  ChatCompletionResponse,\n  ChatCompletionChunk,\n  ProviderConfig,\n  ProviderCapabilities,\n  RequestMetrics,\n  Usage,\n  Message\n} from '../types';\n\nimport { BaseProvider, type BaseProviderOptions, type ProviderFactory } from './base';\nimport { ErrorFactory } from '../utils/errors';\n\n/**\n * Claude-specific configuration\n */\nexport interface ClaudeConfig extends BaseProviderOptions {\n  anthropicVersion?: string;\n}\n\n/**\n * Claude Provider Implementation\n */\nexport class ClaudeProvider extends BaseProvider {\n  private readonly claudeConfig: ClaudeConfig;\n\n  constructor(config: ProviderConfig & ClaudeConfig) {\n    super('claude', config);\n    this.claudeConfig = config;\n  }\n\n  /**\n   * Get Claude provider capabilities\n   */\n  getCapabilities(): ProviderCapabilities {\n    return {\n      chat: true,\n      images: false,\n      embeddings: false,\n      tools: true,\n      streaming: true,\n      vision: true,\n      maxTokens: 200000,\n      costPer1kTokens: { input: 0.003, output: 0.015 }\n    };\n  }\n\n  /**\n   * Validate Claude model\n   */\n  validateModel(model: string): boolean {\n    const validModels = this.getAvailableModels();\n    return validModels.includes(model);\n  }\n\n  /**\n   * Get available Claude models\n   */\n  getAvailableModels(): string[] {\n    return [\n      'claude-3-5-sonnet-20241022',\n      'claude-3-5-haiku-20241022',\n      'claude-3-opus-20240229',\n      'claude-3-sonnet-20240229',\n      'claude-3-haiku-20240307'\n    ];\n  }\n\n  /**\n   * Estimate cost for Claude request\n   */\n  estimateCost(request: ChatCompletionRequest): number {\n    const model = request.model || this.config.model;\n    const tokenCount = this.estimateTokenCount(request);\n    \n    // Model-specific pricing (per 1k tokens)\n    const pricing = this.getModelPricing(model);\n    const inputCost = (tokenCount.input / 1000) * pricing.input;\n    const outputCost = (tokenCount.output / 1000) * pricing.output;\n    \n    return inputCost + outputCost;\n  }\n\n  /**\n   * Chat completion implementation\n   */\n  async chatCompletion(request: ChatCompletionRequest): Promise<ChatCompletionResponse> {\n    const requestId = this.generateRequestId();\n    const startTime = Date.now();\n    const metrics = this.createRequestMetrics(requestId, request.model || this.config.model, startTime);\n\n    return this.executeWithRetry(async () => {\n      const claudeRequest = this.transformRequest(request);\n      \n      const response = await this.executeWithTimeout(\n        this.makeClaudeRequest('/messages', claudeRequest),\n        'chat_completion'\n      );\n\n      const usage = this.calculateUsage(response, request);\n      const transformedResponse = this.transformResponse(response, request, metrics);\n      \n      // Log successful request metrics\n      this.logRequestMetrics(this.finalizeMetrics(metrics, usage, true));\n      \n      return transformedResponse;\n    }, { requestId, operation: 'chat_completion' });\n  }\n\n  /**\n   * Streaming chat completion implementation\n   */\n  async* streamChatCompletion(\n    request: ChatCompletionRequest\n  ): AsyncGenerator<ChatCompletionChunk, void, unknown> {\n    const requestId = this.generateRequestId();\n    const claudeRequest = { ...this.transformRequest(request), stream: true };\n\n    const response = await this.executeWithTimeout(\n      this.makeClaudeStreamRequest('/messages', claudeRequest),\n      'stream_chat_completion'\n    );\n\n    let totalUsage: Usage = {\n      prompt_tokens: 0,\n      completion_tokens: 0,\n      total_tokens: 0,\n      estimated_cost: 0\n    };\n\n    try {\n      for await (const chunk of response) {\n        const transformedChunk = this.transformStreamChunk(chunk, request);\n        if (transformedChunk) {\n          if (transformedChunk.usage) {\n            totalUsage = transformedChunk.usage;\n          }\n          yield transformedChunk;\n        }\n      }\n    } catch (error) {\n      throw ErrorFactory.fromProviderError(error, 'claude', requestId);\n    }\n  }\n\n  /**\n   * Transform unified request to Claude format\n   */\n  private transformRequest(request: ChatCompletionRequest): any {\n    // Extract system message if present\n    const systemMessage = request.messages.find(m => m.role === 'system');\n    const messages = request.messages.filter(m => m.role !== 'system');\n\n    // Convert messages to Claude format\n    const claudeMessages = messages.map(msg => ({\n      role: msg.role === 'assistant' ? 'assistant' : 'user',\n      content: this.transformMessageContent(msg)\n    }));\n\n    const claudeRequest: any = {\n      model: request.model || this.config.model,\n      messages: claudeMessages,\n      max_tokens: request.max_tokens || 1000,\n      ...(systemMessage && { system: systemMessage.content }),\n      ...(request.temperature !== undefined && { temperature: request.temperature }),\n      ...(request.top_p !== undefined && { top_p: request.top_p }),\n      ...(request.stop && { stop_sequences: Array.isArray(request.stop) ? request.stop : [request.stop] }),\n      ...(request.tools && { tools: this.transformTools(request.tools) })\n    };\n\n    return claudeRequest;\n  }\n\n  /**\n   * Transform message content for Claude format\n   */\n  private transformMessageContent(message: Message): any {\n    if (typeof message.content === 'string') {\n      return message.content;\n    }\n\n    // Handle multimodal content (text + images)\n    return message.content.map(content => {\n      if (content.type === 'text') {\n        return {\n          type: 'text',\n          text: content.text\n        };\n      } else if (content.type === 'image_url') {\n        return {\n          type: 'image',\n          source: {\n            type: 'base64',\n            media_type: 'image/jpeg', // Assume JPEG, could be improved\n            data: content.image_url?.url.split(',')[1] || '' // Remove data:image/jpeg;base64, prefix\n          }\n        };\n      }\n      return content;\n    });\n  }\n\n  /**\n   * Transform tools for Claude format\n   */\n  private transformTools(tools: any[]): any[] {\n    return tools.map(tool => ({\n      name: tool.function.name,\n      description: tool.function.description,\n      input_schema: tool.function.parameters\n    }));\n  }\n\n  /**\n   * Transform Claude response to unified format\n   */\n  protected transformResponse(\n    response: any,\n    request: ChatCompletionRequest,\n    metrics: Partial<RequestMetrics>\n  ): ChatCompletionResponse {\n    // Calculate usage from Claude response\n    const usage: Usage = {\n      prompt_tokens: response.usage?.input_tokens || 0,\n      completion_tokens: response.usage?.output_tokens || 0,\n      total_tokens: (response.usage?.input_tokens || 0) + (response.usage?.output_tokens || 0),\n      estimated_cost: this.calculateCost(response.usage, request.model || this.config.model)\n    };\n\n    return {\n      id: response.id,\n      object: 'chat.completion',\n      created: Math.floor(Date.now() / 1000),\n      model: response.model,\n      provider: 'claude',\n      choices: [{\n        index: 0,\n        message: {\n          role: 'assistant',\n          content: this.extractContentFromResponse(response),\n          ...(response.tool_calls && { tool_calls: this.transformToolCallsFromClaude(response.tool_calls) })\n        },\n        finish_reason: this.mapStopReason(response.stop_reason)\n      }],\n      usage\n    };\n  }\n\n  /**\n   * Extract content from Claude response\n   */\n  private extractContentFromResponse(response: any): string {\n    if (response.content && Array.isArray(response.content)) {\n      return response.content\n        .filter((item: any) => item.type === 'text')\n        .map((item: any) => item.text)\n        .join('');\n    }\n    return response.content || '';\n  }\n\n  /**\n   * Transform tool calls from Claude format\n   */\n  private transformToolCallsFromClaude(toolCalls: any[]): any[] {\n    return toolCalls.map((call, index) => ({\n      id: `call_${index}`,\n      type: 'function',\n      function: {\n        name: call.name,\n        arguments: JSON.stringify(call.input)\n      }\n    }));\n  }\n\n  /**\n   * Map Claude stop reason to unified format\n   */\n  private mapStopReason(stopReason: string): string {\n    const reasonMap: Record<string, string> = {\n      'end_turn': 'stop',\n      'max_tokens': 'length',\n      'stop_sequence': 'stop',\n      'tool_use': 'tool_calls'\n    };\n    return reasonMap[stopReason] || 'stop';\n  }\n\n  /**\n   * Transform Claude streaming chunk to unified format\n   */\n  protected transformStreamChunk(\n    chunk: any,\n    request: ChatCompletionRequest\n  ): ChatCompletionChunk | null {\n    if (!chunk || !chunk.type) {\n      return null;\n    }\n\n    // Handle different event types\n    if (chunk.type === 'message_start') {\n      return {\n        id: chunk.message.id,\n        object: 'chat.completion.chunk',\n        created: Math.floor(Date.now() / 1000),\n        model: chunk.message.model,\n        provider: 'claude',\n        choices: [{\n          index: 0,\n          delta: { role: 'assistant' },\n          finish_reason: null\n        }]\n      };\n    }\n\n    if (chunk.type === 'content_block_delta') {\n      return {\n        id: chunk.message?.id || 'unknown',\n        object: 'chat.completion.chunk',\n        created: Math.floor(Date.now() / 1000),\n        model: request.model || this.config.model,\n        provider: 'claude',\n        choices: [{\n          index: 0,\n          delta: { content: chunk.delta.text },\n          finish_reason: null\n        }]\n      };\n    }\n\n    if (chunk.type === 'message_delta') {\n      const usage = chunk.usage ? {\n        prompt_tokens: chunk.usage.input_tokens || 0,\n        completion_tokens: chunk.usage.output_tokens || 0,\n        total_tokens: (chunk.usage.input_tokens || 0) + (chunk.usage.output_tokens || 0),\n        estimated_cost: this.calculateCost(chunk.usage, request.model || this.config.model)\n      } : undefined;\n\n      return {\n        id: chunk.message?.id || 'unknown',\n        object: 'chat.completion.chunk',\n        created: Math.floor(Date.now() / 1000),\n        model: request.model || this.config.model,\n        provider: 'claude',\n        choices: [{\n          index: 0,\n          delta: {},\n          finish_reason: this.mapStopReason(chunk.delta.stop_reason || 'end_turn')\n        }],\n        ...(usage && { usage })\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Make HTTP request to Claude API\n   */\n  private async makeClaudeRequest(endpoint: string, data: any): Promise<any> {\n    const url = `${this.config.baseURL || 'https://api.anthropic.com/v1'}${endpoint}`;\n    const headers = this.getDefaultHeaders();\n\n    // Add Claude-specific headers\n    headers['anthropic-version'] = this.claudeConfig.anthropicVersion || '2023-06-01';\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(data)\n      });\n\n      if (!response.ok) {\n        const error = await response.json().catch(() => ({ message: response.statusText }));\n        throw ErrorFactory.fromProviderError({ ...error, status: response.status }, 'claude');\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw ErrorFactory.fromProviderError(error, 'claude');\n    }\n  }\n\n  /**\n   * Make streaming HTTP request to Claude API\n   */\n  private async makeClaudeStreamRequest(endpoint: string, data: any): Promise<AsyncGenerator<any>> {\n    const url = `${this.config.baseURL || 'https://api.anthropic.com/v1'}${endpoint}`;\n    const headers = { ...this.getDefaultHeaders(), 'Accept': 'text/event-stream' };\n\n    // Add Claude-specific headers\n    headers['anthropic-version'] = this.claudeConfig.anthropicVersion || '2023-06-01';\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ message: response.statusText }));\n      throw ErrorFactory.fromProviderError({ ...error, status: response.status }, 'claude');\n    }\n\n    return this.parseSSEStream(response);\n  }\n\n  /**\n   * Parse Server-Sent Events stream for Claude\n   */\n  private async* parseSSEStream(response: Response): AsyncGenerator<any> {\n    const reader = response.body?.getReader();\n    if (!reader) throw new Error('No response body');\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data === '[DONE]') return;\n            \n            try {\n              yield JSON.parse(data);\n            } catch {\n              // Skip malformed JSON\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  /**\n   * Validate Claude API key format\n   */\n  protected validateApiKey(apiKey: string): boolean {\n    return /^sk-ant-api[a-zA-Z0-9\\-]{95}$/.test(apiKey);\n  }\n\n  /**\n   * Get Claude authorization header\n   */\n  protected getAuthHeader(apiKey: string): string {\n    return `Bearer ${apiKey}`;\n  }\n\n  /**\n   * Test connection to Claude API\n   */\n  protected async testConnection(): Promise<void> {\n    // Simple test with minimal request\n    const testRequest = {\n      model: this.config.model,\n      messages: [{ role: 'user' as const, content: 'Hi' }],\n      max_tokens: 1\n    };\n    \n    await this.makeClaudeRequest('/messages', testRequest).catch(() => {\n      // Simple connectivity test\n    });\n  }\n\n  /**\n   * Calculate usage and cost\n   */\n  private calculateUsage(response: any, request: ChatCompletionRequest): Usage {\n    const usage = response.usage || {};\n    const cost = this.calculateCost(usage, request.model || this.config.model);\n    \n    return {\n      prompt_tokens: usage.input_tokens || 0,\n      completion_tokens: usage.output_tokens || 0,\n      total_tokens: (usage.input_tokens || 0) + (usage.output_tokens || 0),\n      estimated_cost: cost\n    };\n  }\n\n  /**\n   * Calculate cost based on usage and model\n   */\n  private calculateCost(usage: any, model: string): number {\n    const pricing = this.getModelPricing(model);\n    const inputCost = ((usage.input_tokens || 0) / 1000) * pricing.input;\n    const outputCost = ((usage.output_tokens || 0) / 1000) * pricing.output;\n    return inputCost + outputCost;\n  }\n\n  /**\n   * Get model-specific pricing\n   */\n  private getModelPricing(model: string): { input: number; output: number } {\n    const pricingMap: Record<string, { input: number; output: number }> = {\n      'claude-3-5-sonnet-20241022': { input: 0.003, output: 0.015 },\n      'claude-3-5-haiku-20241022': { input: 0.00025, output: 0.00125 },\n      'claude-3-opus-20240229': { input: 0.015, output: 0.075 },\n      'claude-3-sonnet-20240229': { input: 0.003, output: 0.015 },\n      'claude-3-haiku-20240307': { input: 0.00025, output: 0.00125 }\n    };\n\n    return pricingMap[model] || { input: 0.003, output: 0.015 }; // Default to Sonnet pricing\n  }\n\n  /**\n   * Estimate token count for cost calculation\n   */\n  private estimateTokenCount(request: ChatCompletionRequest): { input: number; output: number } {\n    // Rough estimation - Claude typically uses ~4 characters per token\n    const messageText = request.messages\n      .map(m => typeof m.content === 'string' ? m.content : JSON.stringify(m.content))\n      .join(' ');\n    \n    const inputTokens = Math.ceil(messageText.length / 4);\n    const outputTokens = request.max_tokens || 1000;\n\n    return { input: inputTokens, output: outputTokens };\n  }\n\n  /**\n   * Log request metrics for analytics\n   */\n  private logRequestMetrics(metrics: RequestMetrics): void {\n    if (this.config.debug) {\n      console.log('Claude Request Metrics:', {\n        requestId: metrics.requestId,\n        provider: metrics.provider,\n        model: metrics.model,\n        duration: metrics.endTime - metrics.startTime,\n        tokens: metrics.tokens,\n        cost: metrics.cost,\n        success: metrics.success\n      });\n    }\n  }\n}\n\n/**\n * Claude Provider Factory\n */\nexport class ClaudeProviderFactory implements ProviderFactory {\n  create(config: ProviderConfig): ClaudeProvider {\n    return new ClaudeProvider(config as ProviderConfig & ClaudeConfig);\n  }\n\n  supports(provider: ApiProvider): boolean {\n    return provider === 'claude';\n  }\n}\n\n/**\n * Convenience function to create Claude provider\n */\nexport function claude(options: ClaudeConfig = {}): ProviderConfig & ClaudeConfig {\n  return {\n    provider: 'claude',\n    model: options.model || 'claude-3-5-sonnet-20241022',\n    ...options\n  };\n}","/**\n * AI Providers Module - Exports\n * \n * Unified exports for all AI provider implementations with factory functions\n */\n\n// Base provider exports\nexport { BaseProvider, ProviderRegistry, providerRegistry, type ProviderFactory } from './base';\n\n// Provider registry setup (import first)\nimport { OpenAIProviderFactory, openai } from './openai';\nimport { ClaudeProviderFactory, claude } from './claude';\nimport { providerRegistry } from './base';\n\n// OpenAI provider exports\nexport { OpenAIProvider, OpenAIProviderFactory, openai, type OpenAIConfig } from './openai';\n\n// Claude provider exports\nexport { ClaudeProvider, ClaudeProviderFactory, claude, type ClaudeConfig } from './claude';\n\n// Register all providers\nproviderRegistry.register('openai', new OpenAIProviderFactory());\nproviderRegistry.register('claude', new ClaudeProviderFactory());\n\n// Re-export types for external use\nexport type {\n  BaseProviderOptions\n} from './base';\n\n/**\n * Provider convenience functions\n */\nexport const providers = {\n  openai,\n  claude\n} as const;\n\n/**\n * Get all registered provider types\n */\nexport function getSupportedProviders() {\n  return providerRegistry.getRegisteredProviders();\n}\n\n/**\n * Check if a provider is supported\n */\nexport function isProviderSupported(provider: string) {\n  return providerRegistry.supports(provider as any);\n}\n\n/**\n * Health check all providers\n */\nexport async function checkProviderHealth() {\n  return providerRegistry.healthCheckAll();\n}"]}